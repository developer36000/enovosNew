/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { ActionListItem } from "./models/action-list-item";
import { AppDataBlock } from "./models/patterns/app-data-block";
import { AppDialogContractsItem } from "./models/patterns/app-dialog-contracts-item";
import { AppQuickAction } from "./models/patterns/app-quick-action";
import { IDataset } from "./models/bar-chart";
import { ILegendItem } from "./models/chart-legend";
import { DataTableValues } from "./models/components/datatable";
import { Pagination } from "./models/patterns/pagination";
import { CellItem } from "./models/cell-item";
import { DatalistItem } from "./models/components/datalist-item";
import { SelectionControls, SelectionControlsItem } from "./models/selection-controls";
import { DropdownItem } from "./models/dropdown-item";
import { EditableBlockConfig, EditableBlockData } from "./models/components/editable-block";
import { InputChipItem } from "./models/input-chip-item";
import { IDataset as IDataset1 } from "./models/line-chart";
import { ListItem } from "./models/list-item";
import { MenuItem } from "./models/menu-item";
import { Message, MessageButton, MessageOptions } from "./models/message";
import { NavigationItem } from "./models/patterns/navigation-item";
import { PaddingSize } from "./components/clients/enovos/patterns/panel/panel";
import { PricingTableItem } from "./components/clients/enovos/patterns/pricing-table/pricing-table";
import { ScrollspyItem } from "./models/components/scrollspy-item";
import { IStep } from "./components/clients/enovos/patterns/steps/steps";
import { TabsItem } from "./models/foundation/tabs";
import { Subscription } from "rxjs";
export namespace Components {
    interface EdsActionList {
        "actions": ActionListItem[];
        "activeAction": string;
        "fitted": boolean;
        "segmented": boolean;
        /**
          * @description Init the dataitem
         */
        "setActionListItems": (items: ActionListItem[]) => Promise<void>;
        "setActiveAction": (id: string) => Promise<void>;
        "size"?: string;
    }
    interface EdsAdaptiveText {
        "clampLines"?: number;
        "content": string;
        "font"?: string;
        "fontStyle"?: string;
        "fontWeight"?: string;
        "styles"?: string;
        "super": any;
        "type": string;
    }
    interface EdsAdvancedDialog {
        "bodyScrollDisabled"?: boolean;
        "displayDialog": (value: any) => Promise<void>;
        "footerWithShadow"?: boolean;
        "headerIconUrl"?: string;
        "headerSubtitle"?: string;
        "headerTitle"?: string;
        "headerWithShadow"?: boolean;
        "verticalAlignment"?: string;
    }
    interface EdsAppBar {
        "fluid"?: boolean;
        "position"?: string;
    }
    interface EdsAppDataBlock {
        "data"?: AppDataBlock;
        "setData": (data: any) => Promise<void>;
    }
    interface EdsAppDialogConsumptionDownload {
        "displayDialog": (value: any) => Promise<void>;
    }
    interface EdsAppDialogContracts {
        "displayDialog": (value: any) => Promise<void>;
        "items": AppDialogContractsItem[];
        "locale"?: {
    title?: string;
    search?: string;
    filterByCustomers?: string;
    allCustomers?: string;
  };
        "setItems": (items: any) => Promise<void>;
        "styles"?: string;
    }
    interface EdsAppHeader {
        "showBackBtn"?: boolean;
    }
    interface EdsAppPeriodicConsumption {
        /**
          * @description (Re-)calculate charts' width
         */
        "calculateChartsWidth": () => Promise<void>;
        "chartMaxValue"?: number;
        "chartMinValue"?: number;
        "chartValue"?: number;
        "firstItemCaptionIcon"?: string;
        "firstItemCaptionStyles"?: string;
        "firstItemCaptionText"?: string;
        "firstItemTitle"?: string;
        "firstItemValue"?: string;
        "secondItemCaptionIcon"?: string;
        "secondItemCaptionStyles"?: string;
        "secondItemCaptionText"?: string;
        "secondItemTitle"?: string;
        "secondItemValue"?: string;
        "styles"?: string;
    }
    interface EdsAppQuickActions {
        "data": AppQuickAction;
        "setData": (data: any) => Promise<void>;
        "styles"?: string;
    }
    interface EdsAssistiveText {
        "code": string;
        "icon": string;
        "message": string;
        "styles": string;
        "type": string;
    }
    interface EdsAvatar {
        "elevationLevel"?: string;
        "elevationStyle"?: string;
        "icon"?: string;
        "iconStyle"?: string;
        "size"?: string;
        "src"?: string;
    }
    interface EdsBadge {
        "mediaLeading"?: string;
        "rounded": boolean;
        "size"?: string;
        "styles"?: string;
        "text"?: string;
    }
    interface EdsBarChart {
        "barRadius"?: number;
        /**
          * @description (Re-)calculate chart's width
         */
        "calculateWidth": () => Promise<void>;
        "data": IDataset;
        "height": number;
        "minWidth"?: number;
        "renderDelay"?: number;
        "showHorizontalGridLines"?: boolean;
        "showVerticalGridLines"?: boolean;
        "xValues"?: string[];
        "yMaxValue": number;
        "yMinValue": number;
    }
    interface EdsBottomSheet {
        "backdrop": boolean;
        "moveTo": string;
        /**
          * @description Open swipe sheet from bottom
          * @param position The anchor position of the page
         */
        "open": (position: string, animation?: boolean) => Promise<void>;
        "position"?: string;
        "steps": number[];
    }
    interface EdsButton {
        "content"?: string;
        "disabled"?: boolean;
        "expand"?: boolean;
        "grouped"?: boolean;
        "iconPosition"?: string;
        "iconStyles"?: string;
        "isHover"?: boolean;
        "narrow"?: boolean;
        "outlined"?: boolean;
        "rounded"?: boolean;
        "size"?: string;
        "squared"?: boolean;
        "styles"?: string;
        "textOnly"?: boolean;
        "type"?: string;
    }
    interface EdsCard {
        "backgroundContent"?: string;
        "backgroundImage"?: string;
        "backgroundMedia"?: string;
        "clickable"?: boolean;
        "columns": number;
        "columnsMedia": number;
        "direction": string;
        "noBorder"?: boolean;
        "overlay"?: boolean;
        "overlayMedia"?: string;
        "size"?: string;
        "styles"?: string;
        "trailingMedia"?: boolean;
        "verticalAlignment"?: 'top' | 'center' | 'bottom';
        "video"?: string;
        "videoAutoplay": boolean;
        "videoLoop": boolean;
        "videoPlay": boolean;
    }
    interface EdsChartLegend {
        "items": ILegendItem[];
    }
    interface EdsCheckbox {
        "disabled"?: boolean;
        "indeterminate"?: boolean;
        "inputName": string;
        "label"?: string;
        "selected"?: boolean;
        "size"?: string;
        "styles"?: string;
        "value"?: string;
    }
    interface EdsChip {
        "disabled"?: boolean;
        "inputName"?: string;
        "label": string;
        "leadingType"?: string;
        "leadingValue"?: string;
        "motionless"?: boolean;
        "readOnly"?: boolean;
        "selected"?: boolean;
        "size"?: string;
        "sizeAvatar"?: string;
        "styles"?: string;
        "trailingEvent"?: boolean;
        "trailingType"?: string;
        "trailingValue"?: string;
        "uid"?: string;
        "unselectable"?: boolean;
        "value"?: string;
    }
    interface EdsContainer {
        "center": boolean;
        "fluid": boolean;
        "fluidForce"?: string;
        "fullHeight": boolean;
        "noPadding": boolean;
        "size"?: string;
    }
    interface EdsContractItem {
        "contractAddress": string;
        "contractId": string;
        "customerId": string;
        "customerName": string;
        "isCheckable"?: boolean;
        "isChecked"?: boolean;
        "status": 'open' | 'closed';
        "styles"?: string;
        "type": 'electricity' | 'producer' | 'gas';
    }
    interface EdsContractTypeIcon {
        "type"?: 'electricity' | 'producer' | 'gas';
    }
    interface EdsDataTable {
        "checkable"?: boolean;
        "columnRenderers"?: ((value: any) => any)[];
        "columnSizes"?: string[];
        "columns"?: string[];
        "data"?: DataTableValues[];
        "hasIndentedColumn"?: boolean;
        "hideIndentedHeader": boolean;
        "maxHeight"?: string;
        "pagination": Pagination;
        /**
          * @description Set the default active item
         */
        "setData": (data: DataTableValues[]) => Promise<void>;
        /**
          * @description Set the default active item
         */
        "setPagination": (data: Pagination) => Promise<void>;
        "size"?: string;
        "sort"?: boolean[];
        "stickyElevation"?: string;
        "styles"?: string;
    }
    interface EdsDataTableCell {
        "contentSize"?: string;
        "data": CellItem;
        "fitted": boolean;
        "index": number;
        "renderer"?: (value: any) => any;
        "rowId"?: string;
        "size"?: string;
        "styles": string;
    }
    interface EdsDataTableHeader {
        /**
          * @description Call this method to select the header row checkbox
         */
        "activeCheckbox": (value: boolean) => Promise<void>;
        "checkable"?: boolean;
        "columnSizes"?: string[];
        "columns"?: string[];
        "expandable"?: boolean;
        "hasIndentedColumn"?: boolean;
        "maxHeight"?: string;
        "size"?: string;
        "sort"?: boolean[];
        "styles"?: string;
    }
    interface EdsDataTableHeading {
        "checkable"?: boolean;
        "checkedRows": number;
        "columnSizes"?: any[];
        "columns"?: any[];
        "hasIndentedColumn"?: boolean;
        "size": string;
        "styles": string;
    }
    interface EdsDataTableRow {
        /**
          * @description Call this method to select the header row checkbox
         */
        "activeCheckbox": (value: boolean) => Promise<void>;
        "checkable"?: boolean;
        "columnRenderers"?: ((value: any) => any)[];
        "columnSizes"?: any[];
        "data"?: { id: any; values: any[]; children: any[]; selected: boolean; };
        "expandable"?: boolean;
        "hasIndentedColumn"?: boolean;
        "maxHeight"?: string;
        "size"?: string;
    }
    interface EdsDatalist {
        "alternate"?: boolean;
        "alternateReverse"?: boolean;
        "clickable"?: boolean;
        /**
          * @description Collapse item
         */
        "collapse": (value: boolean) => Promise<void>;
        "items": DatalistItem[];
        "padding"?: string;
        /**
          * @description Init the dataitem
         */
        "setDatalistItems": (items: DatalistItem[]) => Promise<void>;
        "styles"?: string;
    }
    interface EdsDatalistItem {
        "clickable"?: boolean;
        /**
          * @description Collapse item
         */
        "collapse": (value: boolean) => Promise<void>;
        "collapsed"?: boolean;
        "expandable"?: boolean;
        "indent"?: number;
        "padding"?: string;
        /**
          * @description Init the dataitem
         */
        "setDatalistItem": (item: DatalistItem) => Promise<void>;
        "styles"?: string;
    }
    interface EdsDatePicker {
        "beginDate": any;
        "elevationLevel"?: string;
        "elevationStyles"?: string;
        "endDate": any;
        "isRanged"?: boolean;
        "locale"?: string;
        "maxDate"?: string;
        "minDate"?: string;
        /**
          * @description Reset date picker
         */
        "reset": () => Promise<void>;
        "selectedDate": any;
        "styles"?: string;
    }
    interface EdsDescriptionList {
        "data"?: any[];
        "isHorizontal": boolean;
        "isInline": boolean;
    }
    interface EdsDialog {
        /**
          * @description Close dialog method
         */
        "close": () => Promise<any>;
        "columns"?: number;
        "columnsFluid": boolean;
        "disableAnimations"?: boolean;
        "disableScroll": boolean;
        "ignoreBackdropClick": boolean;
        /**
          * @description Open dialog method
         */
        "open": () => Promise<any>;
        "size"?: string;
        "verticalAlignment"?: string;
    }
    interface EdsDivider {
        "content": string;
        "styles": string;
    }
    interface EdsDropdown {
        "activeItem"?: string;
        "alignRight": boolean;
        "autocompleteMinChars": number;
        "autocompleteOnFocus": boolean;
        "clearData": () => Promise<void>;
        "data": any[];
        "elevationLevel"?: string;
        "elevationReverse"?: boolean;
        "elevationStyles"?: string;
        "font": string;
        "hasSubItems"?: boolean;
        "indented"?: boolean;
        "parent"?: DropdownItem;
        "placement"?: string;
        "readOnly"?: boolean;
        "selectionControls": SelectionControls;
        /**
          * @description Set the default active item
         */
        "setActiveItem": (key: any) => Promise<void>;
        /**
          * @description Init the menu from an array of item
         */
        "setData": (data: DropdownItem[]) => Promise<void>;
        "setDataSelectionControls": (data: SelectionControls) => Promise<void>;
        "size"?: string;
        "styles"?: string;
        "subItemHorizontalPlacement"?: string;
        "subItemVerticalPlacement"?: string;
        "visibleItems"?: number;
    }
    interface EdsEditableBlock {
        "color"?: string;
        "componentConfig": EditableBlockConfig[];
        "data": EditableBlockData;
        /**
          * @description : Method to get formatted object containing the content
         */
        "getFilledData": () => Promise<{}>;
        /**
          * @description : Method to set config and filter available component and there config.
         */
        "setComponentConfig": (data: any) => Promise<void>;
        /**
          * @description : Method to set data to be display in component
         */
        "setData": (data: any) => Promise<void>;
    }
    interface EdsElevation {
        "level"?: string;
        "reverse"?: boolean;
        "styles"?: string;
    }
    interface EdsExpandableCard {
        "hideCheckbox"?: boolean;
        "hideContentIfUnchecked"?: boolean;
        "icon"?: string;
        "inputName"?: string;
        "inputValue"?: string;
        "isDefaultChecked"?: boolean;
        "isDisabled"?: boolean;
        "isRadio"?: boolean;
        "mainTitle"?: string;
        "styles"?: string;
        "subtitle"?: string;
    }
    interface EdsFieldsGroup {
        "mainTitle"?: string;
        "tooltipContent"?: string;
    }
    interface EdsFlex {
        "nested": boolean;
    }
    interface EdsFlexItem {
    }
    interface EdsGridArea {
        "hasFooter": boolean;
        "hasHeader": boolean;
        "styles": string;
    }
    interface EdsGridAreaItem {
        "area": string;
        "styles": string;
    }
    interface EdsGridLayout {
        "alignCenter"?: boolean;
        "alignVertical": 'top' | 'center' | 'bottom';
        "fitHeight"?: boolean;
        "recursive": boolean;
        "styles": string;
    }
    interface EdsGridLayoutItem {
        "alignContent": 'left' | 'center' | 'right';
        "animation"?: boolean;
        "stretchColumn": boolean;
        "styles": string;
    }
    interface EdsGridStyleOne {
        "backgroundBody"?: string;
        "backgroundFooter"?: string;
        "backgroundHeader"?: string;
        "backgroundImageBody"?: string;
        "backgroundMainFooter"?: string;
        "backgroundNavigation"?: string;
        "bodyAlignCenter"?: boolean;
        "borderColorFooter"?: string;
        "footer"?: boolean;
        "header"?: boolean;
        "main"?: boolean;
        "mainFooter"?: boolean;
        "navigation"?: boolean;
    }
    interface EdsGridStyleTwo {
        "backgroundBody"?: string;
        "backgroundFooter"?: string;
        "backgroundHeader"?: string;
        "backgroundImageBody"?: string;
        "backgroundMainFooter"?: string;
        "backgroundNavigation"?: string;
        "bodyAlignCenter"?: boolean;
        "borderColorFooter"?: string;
        "debug"?: boolean;
        "footer"?: boolean;
        "header"?: boolean;
        "main"?: boolean;
        "mainFooter"?: boolean;
        "navigation"?: boolean;
    }
    interface EdsHeading {
        "content": string;
        "font": string;
        "fontWeight": string;
        "styles": string;
        "type": string;
    }
    interface EdsHero {
        "content": string;
        "font": string;
        "fontWeight": string;
        "styles": string;
        "super": any;
    }
    interface EdsIcon {
        "icon": string;
        "size"?: string;
        "styles"?: string;
    }
    interface EdsImage {
        "alt"?: string;
        "notFitted"?: boolean;
        "size"?: string;
        "src": string;
    }
    interface EdsInfo {
        "infoStyles"?: string;
        "infoText"?: string;
        "infoTooltipIcon"?: string;
        "infoTooltipNotimeout"?: boolean;
        "infoTooltipPointer"?: boolean;
        "infoTooltipSize"?: string;
        "infoTooltipStyles"?: string;
        "infoTooltipText"?: string;
        "infoTooltipTimeoutValue"?: number;
    }
    interface EdsInput {
        "dataName"?: string;
        "dataValue": string;
        "debounce": number;
        "disabled": boolean;
        "ellipsis": boolean;
        "placeholder": string;
        "readOnly": boolean;
        "size"?: string;
        "step": string;
        "styles": string;
        "type": string;
    }
    interface EdsInputChip {
        "data": any[];
        "iconLeading"?: string;
        "iconTrailing"?: string;
        "readOnly": boolean;
        "selectionControlType": any;
        "setItems": (data: InputChipItem[]) => Promise<void>;
        "size"?: string;
        "sizeAvatar"?: string;
        "stacked"?: boolean;
        "styles"?: string;
        "trailingType"?: string;
        "trailingValue"?: string;
    }
    interface EdsLabel {
        "disabled": boolean;
        "required": boolean;
        "size": string;
        "styles": string;
    }
    interface EdsLineChart {
        "datasets": IDataset[];
        "height": number;
        "margin"?: { top: number; right: number; bottom: number; left: number; };
        "minWidth"?: number;
        "renderDelay"?: number;
        "showHorizontalGridLines"?: boolean;
        "showVerticalGridLines"?: boolean;
        "showYAverageLine"?: false;
        "smallDots"?: boolean;
        "xAxisTicks"?: number;
        "xAxisTitle"?: string;
        "xValues": string[];
        "yAverageLegend"?: string;
        "yAxisTitle"?: string;
        "yMaxValue": number;
        "yMinValue": number;
    }
    interface EdsLink {
        "content": string;
        "fontWeight"?: string;
        "iconPosition": string;
        "mailto": string;
        "size"?: string;
        "styles": string;
        "target"?: string;
        "underline": boolean;
        "url": string;
    }
    interface EdsList {
        "align"?: string;
        "icon"?: string;
        "iconStyles"?: string;
        "items": ListItem[];
        /**
          * @description Add datalist to the component Replace the div container by a documentFragment in case there's a new call to setDatalist for an update for example
          * @param data The data to be display
         */
        "setListItems": (data: any) => Promise<void>;
        "typographyCategory"?: string;
    }
    interface EdsLoaderSkeleton {
        "shape": 'circle' | 'card' | 'square';
        "shimmer"?: boolean;
        "size"?: string;
        "stretch"?: boolean;
    }
    interface EdsLogo {
        "classNames": { LOGO: string; };
        "height"?: string;
        "variations": any[];
        "viewBox"?: string;
        "width"?: string;
    }
    interface EdsMenu {
        "activeItem"?: string;
        "disabledItem"?: boolean;
        "iconOnly"?: boolean;
        "indented"?: boolean;
        "items": MenuItem[];
        "level"?: number;
        /**
          * @description Set the default active item
         */
        "setActiveItem": (key: any) => Promise<void>;
        "setItems": (data: MenuItem[]) => Promise<void>;
        "size"?: string;
        "styles"?: string;
    }
    interface EdsMessage {
        "clickable": boolean;
        "columns"?: number;
        "columnsFluid": boolean;
        "fontSize"?: string;
        "fontWeight": string;
        "iconLeading": string;
        "iconStyles": string;
        "inline": boolean;
        /**
          * @description Add datalist to the component
          * @param data The data to be display
         */
        "setButtons": (data: MessageButton[]) => Promise<void>;
        "styles": string;
        "textOnly": boolean;
    }
    interface EdsMessageManager {
        "columns"?: number;
        "columnsFluid": boolean;
        "position": string;
        /**
          * @description Empty the message queue
          * @param options The different options to be used for the message (position, showDuration,...)
         */
        "removeMessages": (options: MessageOptions) => Promise<void>;
        /**
          * @description Add new message to the queue and display it in the view
          * @param options The different options to be used for the message (postion, showDuration,...)
          * @param message The message to be display
         */
        "setMessage": (options: MessageOptions, message: Message) => Promise<void>;
        "verticalOffset"?: string;
    }
    interface EdsMobileDataTable {
        "columns"?: string[];
        "columnsCountLg"?: number;
        "columnsCountMd"?: number;
        "columnsCountSm"?: number;
        "columnsCountXlg"?: number;
        "columnsCountXs"?: number;
        "data"?: any[];
    }
    interface EdsMotion {
        "animationData": any;
        "autoplay": boolean;
        /**
          * @description Destroy the animation
         */
        "destroy": () => Promise<void>;
        "loop": boolean;
        "path": string;
        /**
          * @description Pause the animation
         */
        "pause": () => Promise<void>;
        /**
          * @description Play the animation
         */
        "play": () => Promise<void>;
        "size"?: string;
        /**
          * @description Stop the animation
         */
        "stop": () => Promise<void>;
    }
    interface EdsNavigation {
        "activeItem": string;
        "fontSize"?: string;
        "fontWeight"?: string;
        "iconOnly"?: boolean;
        "items": NavigationItem[];
        "noBorder"?: boolean;
        "position"?: string;
        "setActiveItem": (id: string) => Promise<void>;
        "setItems": (data: NavigationItem[]) => Promise<void>;
        "shrink"?: boolean;
        "size"?: string;
        "styles": string;
        "textOnly"?: boolean;
    }
    interface EdsNoResults {
        "imageUrl"?: string;
        "mainTitle"?: string;
        "subtitle"?: string;
    }
    interface EdsPageHeader {
        "centered"?: boolean;
        "pageTitle"?: string;
    }
    interface EdsPagination {
        "buttonActiveStyle"?: string;
        "config": Pagination;
        "current": number;
        "outlined": boolean;
        /**
          * @description Set the default active item
         */
        "setConfig": (config: Pagination) => Promise<void>;
        "setCurrent": (currentPage: number) => Promise<void>;
        "size"?: string;
        "styles": string;
    }
    interface EdsPanel {
        "bodyPaddingBottom"?: PaddingSize;
        "bodyPaddingLeft"?: PaddingSize;
        "bodyPaddingRight"?: PaddingSize;
        "bodyPaddingTop"?: PaddingSize;
        "footerPaddingBottom"?: PaddingSize;
        "footerPaddingLeft"?: PaddingSize;
        "footerPaddingRight"?: PaddingSize;
        "footerPaddingTop"?: PaddingSize;
        "fullHeight"?: boolean;
        "headerNoMinHeight"?: boolean;
        "headerPaddingBottom"?: PaddingSize;
        "headerPaddingLeft"?: PaddingSize;
        "headerPaddingRight"?: PaddingSize;
        "headerPaddingTop"?: PaddingSize;
        "headerSubtitle"?: string;
        "headerTitle"?: string;
        "headerWithShadow"?: boolean;
    }
    interface EdsParagraph {
        "clampLines"?: number;
        "clampVisibility"?: number;
        "content"?: string;
        "font": string;
        "fontStyle"?: string;
        "fontWeight"?: string;
        "styles"?: string;
        "type": string;
    }
    interface EdsPositionedBadge {
        "additionalMargin"?: string;
        "alignment"?: string;
        "corner"?: boolean;
        "position"?: string;
        "rounded": boolean;
        "size"?: string;
        "styles"?: string;
        "text"?: string;
    }
    interface EdsPositionedIcon {
        "additionalMargin"?: string;
        "alignment"?: string;
        "backgroundColor"?: string;
        "bgColor"?: string;
        "corner"?: boolean;
        "icon"?: string;
        "position"?: string;
        "rounded": boolean;
        "size"?: string;
        "styles"?: string;
    }
    interface EdsPricingTable {
        "inputName": string;
        "items"?: PricingTableItem[];
        "locale"?: {
    perMonth?: string;
    perYear?: string;
    recommended?: string;
  };
        "recommendedItem"?: string;
        "selectedItem"?: string;
        "styles"?: string;
    }
    interface EdsProgressBar {
        "animated"?: boolean;
        "graduated"?: boolean;
        "leadingText"?: string;
        "light"?: boolean;
        "progressMax": number;
        "progressValue": number;
        "styles"?: string;
        "titleText"?: string;
        "trailingText"?: string;
    }
    interface EdsQuickAction {
        "icon"?: string;
        "mainTitle"?: string;
        "showTrailingIcon"?: boolean;
        "styles"?: string;
        "subtitle"?: string;
    }
    interface EdsRadioButton {
        /**
          * @description Init the dataitem
         */
        "activeRadioButton": () => Promise<void>;
        "disabled"?: boolean;
        "icon"?: string;
        "inputName": string;
        "label"?: string;
        "selected"?: boolean;
        "size"?: string;
        "styles"?: string;
        "value"?: string;
    }
    interface EdsScrollspy {
        "items": ScrollspyItem[];
        "target"?: string;
    }
    interface EdsSelect {
        "dataName"?: string;
        "dataValue"?: string;
        "disabled"?: boolean;
        "options": string[];
        "required"?: boolean;
        "styles"?: string;
    }
    interface EdsSelectionControls {
        "activeItem"?: string;
        "clearData": () => Promise<void>;
        "data": SelectionControlsItem[];
        "indented"?: boolean;
        "refresh"?: number;
        "setData": (data: SelectionControlsItem[]) => Promise<void>;
        "type": string;
    }
    interface EdsSideSheet {
        "backdrop": boolean;
        "close": () => Promise<void>;
        "elevationLevel"?: string;
        "elevationStyle"?: string;
        "ignoreBackdropClick": boolean;
        /**
          * INJECT_ANCHOR
         */
        "open": () => Promise<void>;
        "position"?: string;
        "size"?: string;
    }
    interface EdsSkeleton {
        "height"?: string;
        "rounded"?: boolean;
        "width"?: string;
    }
    interface EdsSlider {
        "appendSlide": (items: any[]) => Promise<void>;
        "removeAllSlides": () => Promise<void>;
        "slideNext": () => Promise<void>;
        "slidePrev": () => Promise<void>;
        "slidesPerView"?: number | 'auto';
    }
    interface EdsSmall {
        "content": string;
        "font": string;
        "fontStyle": string;
        "fontWeight": string;
        "styles": string;
    }
    interface EdsStatusIcon {
        "status"?: 'open' | 'closed';
        "text"?: string;
    }
    interface EdsSteps {
        "activeItemId"?: string;
        "items": IStep[];
        "itemsClickable"?: boolean;
        "styles"?: string;
    }
    interface EdsSwitch {
        "checked"?: boolean;
        "disabled"?: boolean;
        "elevationLevel"?: string;
        "inputName": string;
        "label"?: string;
        "size"?: string;
        "styles"?: string;
        "value"?: string;
    }
    interface EdsTabs {
        "activeItem"?: string;
        "backgroundStyles"?: string;
        "border"?: boolean;
        "items": TabsItem[];
        "separated": boolean;
        /**
          * INJECT_ANCHOR
         */
        "setItems": (data: TabsItem[]) => Promise<void>;
        "shrink"?: boolean;
        "styles"?: string;
    }
    interface EdsTemplateGridMobile {
        "bgVideo": string;
        "styles": string;
    }
    interface EdsTextField {
        "assistiveText": string;
        "chips"?: InputChipItem[];
        "clearButton": boolean;
        "dataName"?: string;
        "dataValue": string;
        "debounce"?: number;
        "disabled": boolean;
        "ellipsis": boolean;
        "forgetLink"?: boolean;
        "forgetLinkText"?: string;
        "iconAssistiveText"?: string;
        "iconLeading": string;
        "iconTrailing": string;
        "infoStyles"?: string;
        "infoText"?: string;
        "infoTooltipIcon"?: string;
        "infoTooltipNotimeout"?: boolean;
        "infoTooltipPointer"?: boolean;
        "infoTooltipSize"?: string;
        "infoTooltipStyles"?: string;
        "infoTooltipText"?: string;
        "infoTooltipTimeoutValue"?: number;
        "label": string;
        "labelInside": string;
        "labelStyles": string;
        "options"?: string[];
        "placeholder"?: string;
        "readOnly": boolean;
        "rounded": boolean;
        /**
          * @description Add items to the component
          * @param data The data to be display
         */
        "setTabItems": (data: TabsItem[]) => Promise<void>;
        "size"?: string;
        "stacked"?: boolean;
        "step"?: string;
        "styles": string;
        "tabItems": TabsItem[];
        "trailingButton": any;
        "type": string;
    }
    interface EdsThemesManager {
        "get": () => Promise<string>;
        "set": (theme: string) => Promise<void>;
    }
    interface EdsTooltip {
        "autoInit"?: boolean;
        "closeTooltip": () => Promise<void>;
        "elevationLevel"?: string;
        "elevationStyle"?: string;
        "init": () => Promise<void>;
        "notimeout"?: boolean;
        "placement"?: string;
        "pointer": boolean;
        "selector": string;
        "size"?: string;
        "styles"?: string;
        "text": string;
        "timeoutValue"?: number;
    }
    interface EdsUploadDragger {
        "height"?: string;
        "styles"?: string;
        "width"?: string;
    }
    interface EdsUploadedImage {
        "fileName"?: string;
        "fileSize"?: string;
        "height"?: string;
        "imageSrc"?: string;
        "overlayDisabled"?: boolean;
        "variation"?: string;
        "width"?: string;
    }
    interface EdsVideo {
        "cover"?: boolean;
        "fitted"?: boolean;
        "height"?: string;
        "path": string;
        /**
          * @description Pause the animation
         */
        "pause": () => Promise<void>;
        /**
          * @description Play the animation
         */
        "play": () => Promise<void>;
        "playOnClick"?: boolean;
        "posterPath"?: string;
        "preload"?: string;
        /**
          * @description Stop the animation
         */
        "stop": () => Promise<void>;
        "type": string;
        "videoAutoplay"?: boolean;
        "videoControls"?: boolean;
        "videoFullWidth"?: boolean;
        "videoLoop"?: boolean;
        "videoMuted"?: boolean;
        "width"?: string;
    }
    interface EdsViewAppEnovos {
    }
    interface EdsViewAppEnovosSection404 {
    }
    interface EdsViewAppEnovosSectionConsumption {
        "brand"?: string;
    }
    interface EdsViewAppEnovosSectionContractDetails {
    }
    interface EdsViewAppEnovosSectionContractList {
        "brand"?: string;
        "consumptionDownloadItems"?: any[];
    }
    interface EdsViewAppEnovosSectionContractListEmpty {
    }
    interface EdsViewAppEnovosSectionIAmMovingSingleContract {
        "brand"?: string;
    }
    interface EdsViewAppEnovosSectionInvoices {
        "brand"?: string;
    }
    interface EdsViewAppEnovosSectionLandingPage {
        "brand"?: string;
    }
    interface EdsViewAppEnovosSectionMyAccountMultiple {
        "brand"?: string;
        "variation"?: string;
    }
    interface EdsViewAppEnovosSectionMyAccountSingle {
        "brand"?: string;
        "variation"?: string;
    }
    interface EdsViewAppEnovosSectionOverview {
        "brand"?: string;
    }
    interface EdsViewAppEnovosSectionOverviewWithSlider {
        "brand"?: string;
    }
    interface EdsViewport {
        "getViewport": () => Promise<string>;
        "isBiggerThan": (viewport: string) => Promise<boolean>;
        "isEqualTo": (viewport: string) => Promise<boolean>;
        "isSmallerThan": (viewport: string) => Promise<boolean>;
        "subscribe": (callback: (value: { prev: string; current: string; }) => any) => Promise<Subscription>;
    }
}
declare global {
    interface HTMLEdsActionListElement extends Components.EdsActionList, HTMLStencilElement {
    }
    var HTMLEdsActionListElement: {
        prototype: HTMLEdsActionListElement;
        new (): HTMLEdsActionListElement;
    };
    interface HTMLEdsAdaptiveTextElement extends Components.EdsAdaptiveText, HTMLStencilElement {
    }
    var HTMLEdsAdaptiveTextElement: {
        prototype: HTMLEdsAdaptiveTextElement;
        new (): HTMLEdsAdaptiveTextElement;
    };
    interface HTMLEdsAdvancedDialogElement extends Components.EdsAdvancedDialog, HTMLStencilElement {
    }
    var HTMLEdsAdvancedDialogElement: {
        prototype: HTMLEdsAdvancedDialogElement;
        new (): HTMLEdsAdvancedDialogElement;
    };
    interface HTMLEdsAppBarElement extends Components.EdsAppBar, HTMLStencilElement {
    }
    var HTMLEdsAppBarElement: {
        prototype: HTMLEdsAppBarElement;
        new (): HTMLEdsAppBarElement;
    };
    interface HTMLEdsAppDataBlockElement extends Components.EdsAppDataBlock, HTMLStencilElement {
    }
    var HTMLEdsAppDataBlockElement: {
        prototype: HTMLEdsAppDataBlockElement;
        new (): HTMLEdsAppDataBlockElement;
    };
    interface HTMLEdsAppDialogConsumptionDownloadElement extends Components.EdsAppDialogConsumptionDownload, HTMLStencilElement {
    }
    var HTMLEdsAppDialogConsumptionDownloadElement: {
        prototype: HTMLEdsAppDialogConsumptionDownloadElement;
        new (): HTMLEdsAppDialogConsumptionDownloadElement;
    };
    interface HTMLEdsAppDialogContractsElement extends Components.EdsAppDialogContracts, HTMLStencilElement {
    }
    var HTMLEdsAppDialogContractsElement: {
        prototype: HTMLEdsAppDialogContractsElement;
        new (): HTMLEdsAppDialogContractsElement;
    };
    interface HTMLEdsAppHeaderElement extends Components.EdsAppHeader, HTMLStencilElement {
    }
    var HTMLEdsAppHeaderElement: {
        prototype: HTMLEdsAppHeaderElement;
        new (): HTMLEdsAppHeaderElement;
    };
    interface HTMLEdsAppPeriodicConsumptionElement extends Components.EdsAppPeriodicConsumption, HTMLStencilElement {
    }
    var HTMLEdsAppPeriodicConsumptionElement: {
        prototype: HTMLEdsAppPeriodicConsumptionElement;
        new (): HTMLEdsAppPeriodicConsumptionElement;
    };
    interface HTMLEdsAppQuickActionsElement extends Components.EdsAppQuickActions, HTMLStencilElement {
    }
    var HTMLEdsAppQuickActionsElement: {
        prototype: HTMLEdsAppQuickActionsElement;
        new (): HTMLEdsAppQuickActionsElement;
    };
    interface HTMLEdsAssistiveTextElement extends Components.EdsAssistiveText, HTMLStencilElement {
    }
    var HTMLEdsAssistiveTextElement: {
        prototype: HTMLEdsAssistiveTextElement;
        new (): HTMLEdsAssistiveTextElement;
    };
    interface HTMLEdsAvatarElement extends Components.EdsAvatar, HTMLStencilElement {
    }
    var HTMLEdsAvatarElement: {
        prototype: HTMLEdsAvatarElement;
        new (): HTMLEdsAvatarElement;
    };
    interface HTMLEdsBadgeElement extends Components.EdsBadge, HTMLStencilElement {
    }
    var HTMLEdsBadgeElement: {
        prototype: HTMLEdsBadgeElement;
        new (): HTMLEdsBadgeElement;
    };
    interface HTMLEdsBarChartElement extends Components.EdsBarChart, HTMLStencilElement {
    }
    var HTMLEdsBarChartElement: {
        prototype: HTMLEdsBarChartElement;
        new (): HTMLEdsBarChartElement;
    };
    interface HTMLEdsBottomSheetElement extends Components.EdsBottomSheet, HTMLStencilElement {
    }
    var HTMLEdsBottomSheetElement: {
        prototype: HTMLEdsBottomSheetElement;
        new (): HTMLEdsBottomSheetElement;
    };
    interface HTMLEdsButtonElement extends Components.EdsButton, HTMLStencilElement {
    }
    var HTMLEdsButtonElement: {
        prototype: HTMLEdsButtonElement;
        new (): HTMLEdsButtonElement;
    };
    interface HTMLEdsCardElement extends Components.EdsCard, HTMLStencilElement {
    }
    var HTMLEdsCardElement: {
        prototype: HTMLEdsCardElement;
        new (): HTMLEdsCardElement;
    };
    interface HTMLEdsChartLegendElement extends Components.EdsChartLegend, HTMLStencilElement {
    }
    var HTMLEdsChartLegendElement: {
        prototype: HTMLEdsChartLegendElement;
        new (): HTMLEdsChartLegendElement;
    };
    interface HTMLEdsCheckboxElement extends Components.EdsCheckbox, HTMLStencilElement {
    }
    var HTMLEdsCheckboxElement: {
        prototype: HTMLEdsCheckboxElement;
        new (): HTMLEdsCheckboxElement;
    };
    interface HTMLEdsChipElement extends Components.EdsChip, HTMLStencilElement {
    }
    var HTMLEdsChipElement: {
        prototype: HTMLEdsChipElement;
        new (): HTMLEdsChipElement;
    };
    interface HTMLEdsContainerElement extends Components.EdsContainer, HTMLStencilElement {
    }
    var HTMLEdsContainerElement: {
        prototype: HTMLEdsContainerElement;
        new (): HTMLEdsContainerElement;
    };
    interface HTMLEdsContractItemElement extends Components.EdsContractItem, HTMLStencilElement {
    }
    var HTMLEdsContractItemElement: {
        prototype: HTMLEdsContractItemElement;
        new (): HTMLEdsContractItemElement;
    };
    interface HTMLEdsContractTypeIconElement extends Components.EdsContractTypeIcon, HTMLStencilElement {
    }
    var HTMLEdsContractTypeIconElement: {
        prototype: HTMLEdsContractTypeIconElement;
        new (): HTMLEdsContractTypeIconElement;
    };
    interface HTMLEdsDataTableElement extends Components.EdsDataTable, HTMLStencilElement {
    }
    var HTMLEdsDataTableElement: {
        prototype: HTMLEdsDataTableElement;
        new (): HTMLEdsDataTableElement;
    };
    interface HTMLEdsDataTableCellElement extends Components.EdsDataTableCell, HTMLStencilElement {
    }
    var HTMLEdsDataTableCellElement: {
        prototype: HTMLEdsDataTableCellElement;
        new (): HTMLEdsDataTableCellElement;
    };
    interface HTMLEdsDataTableHeaderElement extends Components.EdsDataTableHeader, HTMLStencilElement {
    }
    var HTMLEdsDataTableHeaderElement: {
        prototype: HTMLEdsDataTableHeaderElement;
        new (): HTMLEdsDataTableHeaderElement;
    };
    interface HTMLEdsDataTableHeadingElement extends Components.EdsDataTableHeading, HTMLStencilElement {
    }
    var HTMLEdsDataTableHeadingElement: {
        prototype: HTMLEdsDataTableHeadingElement;
        new (): HTMLEdsDataTableHeadingElement;
    };
    interface HTMLEdsDataTableRowElement extends Components.EdsDataTableRow, HTMLStencilElement {
    }
    var HTMLEdsDataTableRowElement: {
        prototype: HTMLEdsDataTableRowElement;
        new (): HTMLEdsDataTableRowElement;
    };
    interface HTMLEdsDatalistElement extends Components.EdsDatalist, HTMLStencilElement {
    }
    var HTMLEdsDatalistElement: {
        prototype: HTMLEdsDatalistElement;
        new (): HTMLEdsDatalistElement;
    };
    interface HTMLEdsDatalistItemElement extends Components.EdsDatalistItem, HTMLStencilElement {
    }
    var HTMLEdsDatalistItemElement: {
        prototype: HTMLEdsDatalistItemElement;
        new (): HTMLEdsDatalistItemElement;
    };
    interface HTMLEdsDatePickerElement extends Components.EdsDatePicker, HTMLStencilElement {
    }
    var HTMLEdsDatePickerElement: {
        prototype: HTMLEdsDatePickerElement;
        new (): HTMLEdsDatePickerElement;
    };
    interface HTMLEdsDescriptionListElement extends Components.EdsDescriptionList, HTMLStencilElement {
    }
    var HTMLEdsDescriptionListElement: {
        prototype: HTMLEdsDescriptionListElement;
        new (): HTMLEdsDescriptionListElement;
    };
    interface HTMLEdsDialogElement extends Components.EdsDialog, HTMLStencilElement {
    }
    var HTMLEdsDialogElement: {
        prototype: HTMLEdsDialogElement;
        new (): HTMLEdsDialogElement;
    };
    interface HTMLEdsDividerElement extends Components.EdsDivider, HTMLStencilElement {
    }
    var HTMLEdsDividerElement: {
        prototype: HTMLEdsDividerElement;
        new (): HTMLEdsDividerElement;
    };
    interface HTMLEdsDropdownElement extends Components.EdsDropdown, HTMLStencilElement {
    }
    var HTMLEdsDropdownElement: {
        prototype: HTMLEdsDropdownElement;
        new (): HTMLEdsDropdownElement;
    };
    interface HTMLEdsEditableBlockElement extends Components.EdsEditableBlock, HTMLStencilElement {
    }
    var HTMLEdsEditableBlockElement: {
        prototype: HTMLEdsEditableBlockElement;
        new (): HTMLEdsEditableBlockElement;
    };
    interface HTMLEdsElevationElement extends Components.EdsElevation, HTMLStencilElement {
    }
    var HTMLEdsElevationElement: {
        prototype: HTMLEdsElevationElement;
        new (): HTMLEdsElevationElement;
    };
    interface HTMLEdsExpandableCardElement extends Components.EdsExpandableCard, HTMLStencilElement {
    }
    var HTMLEdsExpandableCardElement: {
        prototype: HTMLEdsExpandableCardElement;
        new (): HTMLEdsExpandableCardElement;
    };
    interface HTMLEdsFieldsGroupElement extends Components.EdsFieldsGroup, HTMLStencilElement {
    }
    var HTMLEdsFieldsGroupElement: {
        prototype: HTMLEdsFieldsGroupElement;
        new (): HTMLEdsFieldsGroupElement;
    };
    interface HTMLEdsFlexElement extends Components.EdsFlex, HTMLStencilElement {
    }
    var HTMLEdsFlexElement: {
        prototype: HTMLEdsFlexElement;
        new (): HTMLEdsFlexElement;
    };
    interface HTMLEdsFlexItemElement extends Components.EdsFlexItem, HTMLStencilElement {
    }
    var HTMLEdsFlexItemElement: {
        prototype: HTMLEdsFlexItemElement;
        new (): HTMLEdsFlexItemElement;
    };
    interface HTMLEdsGridAreaElement extends Components.EdsGridArea, HTMLStencilElement {
    }
    var HTMLEdsGridAreaElement: {
        prototype: HTMLEdsGridAreaElement;
        new (): HTMLEdsGridAreaElement;
    };
    interface HTMLEdsGridAreaItemElement extends Components.EdsGridAreaItem, HTMLStencilElement {
    }
    var HTMLEdsGridAreaItemElement: {
        prototype: HTMLEdsGridAreaItemElement;
        new (): HTMLEdsGridAreaItemElement;
    };
    interface HTMLEdsGridLayoutElement extends Components.EdsGridLayout, HTMLStencilElement {
    }
    var HTMLEdsGridLayoutElement: {
        prototype: HTMLEdsGridLayoutElement;
        new (): HTMLEdsGridLayoutElement;
    };
    interface HTMLEdsGridLayoutItemElement extends Components.EdsGridLayoutItem, HTMLStencilElement {
    }
    var HTMLEdsGridLayoutItemElement: {
        prototype: HTMLEdsGridLayoutItemElement;
        new (): HTMLEdsGridLayoutItemElement;
    };
    interface HTMLEdsGridStyleOneElement extends Components.EdsGridStyleOne, HTMLStencilElement {
    }
    var HTMLEdsGridStyleOneElement: {
        prototype: HTMLEdsGridStyleOneElement;
        new (): HTMLEdsGridStyleOneElement;
    };
    interface HTMLEdsGridStyleTwoElement extends Components.EdsGridStyleTwo, HTMLStencilElement {
    }
    var HTMLEdsGridStyleTwoElement: {
        prototype: HTMLEdsGridStyleTwoElement;
        new (): HTMLEdsGridStyleTwoElement;
    };
    interface HTMLEdsHeadingElement extends Components.EdsHeading, HTMLStencilElement {
    }
    var HTMLEdsHeadingElement: {
        prototype: HTMLEdsHeadingElement;
        new (): HTMLEdsHeadingElement;
    };
    interface HTMLEdsHeroElement extends Components.EdsHero, HTMLStencilElement {
    }
    var HTMLEdsHeroElement: {
        prototype: HTMLEdsHeroElement;
        new (): HTMLEdsHeroElement;
    };
    interface HTMLEdsIconElement extends Components.EdsIcon, HTMLStencilElement {
    }
    var HTMLEdsIconElement: {
        prototype: HTMLEdsIconElement;
        new (): HTMLEdsIconElement;
    };
    interface HTMLEdsImageElement extends Components.EdsImage, HTMLStencilElement {
    }
    var HTMLEdsImageElement: {
        prototype: HTMLEdsImageElement;
        new (): HTMLEdsImageElement;
    };
    interface HTMLEdsInfoElement extends Components.EdsInfo, HTMLStencilElement {
    }
    var HTMLEdsInfoElement: {
        prototype: HTMLEdsInfoElement;
        new (): HTMLEdsInfoElement;
    };
    interface HTMLEdsInputElement extends Components.EdsInput, HTMLStencilElement {
    }
    var HTMLEdsInputElement: {
        prototype: HTMLEdsInputElement;
        new (): HTMLEdsInputElement;
    };
    interface HTMLEdsInputChipElement extends Components.EdsInputChip, HTMLStencilElement {
    }
    var HTMLEdsInputChipElement: {
        prototype: HTMLEdsInputChipElement;
        new (): HTMLEdsInputChipElement;
    };
    interface HTMLEdsLabelElement extends Components.EdsLabel, HTMLStencilElement {
    }
    var HTMLEdsLabelElement: {
        prototype: HTMLEdsLabelElement;
        new (): HTMLEdsLabelElement;
    };
    interface HTMLEdsLineChartElement extends Components.EdsLineChart, HTMLStencilElement {
    }
    var HTMLEdsLineChartElement: {
        prototype: HTMLEdsLineChartElement;
        new (): HTMLEdsLineChartElement;
    };
    interface HTMLEdsLinkElement extends Components.EdsLink, HTMLStencilElement {
    }
    var HTMLEdsLinkElement: {
        prototype: HTMLEdsLinkElement;
        new (): HTMLEdsLinkElement;
    };
    interface HTMLEdsListElement extends Components.EdsList, HTMLStencilElement {
    }
    var HTMLEdsListElement: {
        prototype: HTMLEdsListElement;
        new (): HTMLEdsListElement;
    };
    interface HTMLEdsLoaderSkeletonElement extends Components.EdsLoaderSkeleton, HTMLStencilElement {
    }
    var HTMLEdsLoaderSkeletonElement: {
        prototype: HTMLEdsLoaderSkeletonElement;
        new (): HTMLEdsLoaderSkeletonElement;
    };
    interface HTMLEdsLogoElement extends Components.EdsLogo, HTMLStencilElement {
    }
    var HTMLEdsLogoElement: {
        prototype: HTMLEdsLogoElement;
        new (): HTMLEdsLogoElement;
    };
    interface HTMLEdsMenuElement extends Components.EdsMenu, HTMLStencilElement {
    }
    var HTMLEdsMenuElement: {
        prototype: HTMLEdsMenuElement;
        new (): HTMLEdsMenuElement;
    };
    interface HTMLEdsMessageElement extends Components.EdsMessage, HTMLStencilElement {
    }
    var HTMLEdsMessageElement: {
        prototype: HTMLEdsMessageElement;
        new (): HTMLEdsMessageElement;
    };
    interface HTMLEdsMessageManagerElement extends Components.EdsMessageManager, HTMLStencilElement {
    }
    var HTMLEdsMessageManagerElement: {
        prototype: HTMLEdsMessageManagerElement;
        new (): HTMLEdsMessageManagerElement;
    };
    interface HTMLEdsMobileDataTableElement extends Components.EdsMobileDataTable, HTMLStencilElement {
    }
    var HTMLEdsMobileDataTableElement: {
        prototype: HTMLEdsMobileDataTableElement;
        new (): HTMLEdsMobileDataTableElement;
    };
    interface HTMLEdsMotionElement extends Components.EdsMotion, HTMLStencilElement {
    }
    var HTMLEdsMotionElement: {
        prototype: HTMLEdsMotionElement;
        new (): HTMLEdsMotionElement;
    };
    interface HTMLEdsNavigationElement extends Components.EdsNavigation, HTMLStencilElement {
    }
    var HTMLEdsNavigationElement: {
        prototype: HTMLEdsNavigationElement;
        new (): HTMLEdsNavigationElement;
    };
    interface HTMLEdsNoResultsElement extends Components.EdsNoResults, HTMLStencilElement {
    }
    var HTMLEdsNoResultsElement: {
        prototype: HTMLEdsNoResultsElement;
        new (): HTMLEdsNoResultsElement;
    };
    interface HTMLEdsPageHeaderElement extends Components.EdsPageHeader, HTMLStencilElement {
    }
    var HTMLEdsPageHeaderElement: {
        prototype: HTMLEdsPageHeaderElement;
        new (): HTMLEdsPageHeaderElement;
    };
    interface HTMLEdsPaginationElement extends Components.EdsPagination, HTMLStencilElement {
    }
    var HTMLEdsPaginationElement: {
        prototype: HTMLEdsPaginationElement;
        new (): HTMLEdsPaginationElement;
    };
    interface HTMLEdsPanelElement extends Components.EdsPanel, HTMLStencilElement {
    }
    var HTMLEdsPanelElement: {
        prototype: HTMLEdsPanelElement;
        new (): HTMLEdsPanelElement;
    };
    interface HTMLEdsParagraphElement extends Components.EdsParagraph, HTMLStencilElement {
    }
    var HTMLEdsParagraphElement: {
        prototype: HTMLEdsParagraphElement;
        new (): HTMLEdsParagraphElement;
    };
    interface HTMLEdsPositionedBadgeElement extends Components.EdsPositionedBadge, HTMLStencilElement {
    }
    var HTMLEdsPositionedBadgeElement: {
        prototype: HTMLEdsPositionedBadgeElement;
        new (): HTMLEdsPositionedBadgeElement;
    };
    interface HTMLEdsPositionedIconElement extends Components.EdsPositionedIcon, HTMLStencilElement {
    }
    var HTMLEdsPositionedIconElement: {
        prototype: HTMLEdsPositionedIconElement;
        new (): HTMLEdsPositionedIconElement;
    };
    interface HTMLEdsPricingTableElement extends Components.EdsPricingTable, HTMLStencilElement {
    }
    var HTMLEdsPricingTableElement: {
        prototype: HTMLEdsPricingTableElement;
        new (): HTMLEdsPricingTableElement;
    };
    interface HTMLEdsProgressBarElement extends Components.EdsProgressBar, HTMLStencilElement {
    }
    var HTMLEdsProgressBarElement: {
        prototype: HTMLEdsProgressBarElement;
        new (): HTMLEdsProgressBarElement;
    };
    interface HTMLEdsQuickActionElement extends Components.EdsQuickAction, HTMLStencilElement {
    }
    var HTMLEdsQuickActionElement: {
        prototype: HTMLEdsQuickActionElement;
        new (): HTMLEdsQuickActionElement;
    };
    interface HTMLEdsRadioButtonElement extends Components.EdsRadioButton, HTMLStencilElement {
    }
    var HTMLEdsRadioButtonElement: {
        prototype: HTMLEdsRadioButtonElement;
        new (): HTMLEdsRadioButtonElement;
    };
    interface HTMLEdsScrollspyElement extends Components.EdsScrollspy, HTMLStencilElement {
    }
    var HTMLEdsScrollspyElement: {
        prototype: HTMLEdsScrollspyElement;
        new (): HTMLEdsScrollspyElement;
    };
    interface HTMLEdsSelectElement extends Components.EdsSelect, HTMLStencilElement {
    }
    var HTMLEdsSelectElement: {
        prototype: HTMLEdsSelectElement;
        new (): HTMLEdsSelectElement;
    };
    interface HTMLEdsSelectionControlsElement extends Components.EdsSelectionControls, HTMLStencilElement {
    }
    var HTMLEdsSelectionControlsElement: {
        prototype: HTMLEdsSelectionControlsElement;
        new (): HTMLEdsSelectionControlsElement;
    };
    interface HTMLEdsSideSheetElement extends Components.EdsSideSheet, HTMLStencilElement {
    }
    var HTMLEdsSideSheetElement: {
        prototype: HTMLEdsSideSheetElement;
        new (): HTMLEdsSideSheetElement;
    };
    interface HTMLEdsSkeletonElement extends Components.EdsSkeleton, HTMLStencilElement {
    }
    var HTMLEdsSkeletonElement: {
        prototype: HTMLEdsSkeletonElement;
        new (): HTMLEdsSkeletonElement;
    };
    interface HTMLEdsSliderElement extends Components.EdsSlider, HTMLStencilElement {
    }
    var HTMLEdsSliderElement: {
        prototype: HTMLEdsSliderElement;
        new (): HTMLEdsSliderElement;
    };
    interface HTMLEdsSmallElement extends Components.EdsSmall, HTMLStencilElement {
    }
    var HTMLEdsSmallElement: {
        prototype: HTMLEdsSmallElement;
        new (): HTMLEdsSmallElement;
    };
    interface HTMLEdsStatusIconElement extends Components.EdsStatusIcon, HTMLStencilElement {
    }
    var HTMLEdsStatusIconElement: {
        prototype: HTMLEdsStatusIconElement;
        new (): HTMLEdsStatusIconElement;
    };
    interface HTMLEdsStepsElement extends Components.EdsSteps, HTMLStencilElement {
    }
    var HTMLEdsStepsElement: {
        prototype: HTMLEdsStepsElement;
        new (): HTMLEdsStepsElement;
    };
    interface HTMLEdsSwitchElement extends Components.EdsSwitch, HTMLStencilElement {
    }
    var HTMLEdsSwitchElement: {
        prototype: HTMLEdsSwitchElement;
        new (): HTMLEdsSwitchElement;
    };
    interface HTMLEdsTabsElement extends Components.EdsTabs, HTMLStencilElement {
    }
    var HTMLEdsTabsElement: {
        prototype: HTMLEdsTabsElement;
        new (): HTMLEdsTabsElement;
    };
    interface HTMLEdsTemplateGridMobileElement extends Components.EdsTemplateGridMobile, HTMLStencilElement {
    }
    var HTMLEdsTemplateGridMobileElement: {
        prototype: HTMLEdsTemplateGridMobileElement;
        new (): HTMLEdsTemplateGridMobileElement;
    };
    interface HTMLEdsTextFieldElement extends Components.EdsTextField, HTMLStencilElement {
    }
    var HTMLEdsTextFieldElement: {
        prototype: HTMLEdsTextFieldElement;
        new (): HTMLEdsTextFieldElement;
    };
    interface HTMLEdsThemesManagerElement extends Components.EdsThemesManager, HTMLStencilElement {
    }
    var HTMLEdsThemesManagerElement: {
        prototype: HTMLEdsThemesManagerElement;
        new (): HTMLEdsThemesManagerElement;
    };
    interface HTMLEdsTooltipElement extends Components.EdsTooltip, HTMLStencilElement {
    }
    var HTMLEdsTooltipElement: {
        prototype: HTMLEdsTooltipElement;
        new (): HTMLEdsTooltipElement;
    };
    interface HTMLEdsUploadDraggerElement extends Components.EdsUploadDragger, HTMLStencilElement {
    }
    var HTMLEdsUploadDraggerElement: {
        prototype: HTMLEdsUploadDraggerElement;
        new (): HTMLEdsUploadDraggerElement;
    };
    interface HTMLEdsUploadedImageElement extends Components.EdsUploadedImage, HTMLStencilElement {
    }
    var HTMLEdsUploadedImageElement: {
        prototype: HTMLEdsUploadedImageElement;
        new (): HTMLEdsUploadedImageElement;
    };
    interface HTMLEdsVideoElement extends Components.EdsVideo, HTMLStencilElement {
    }
    var HTMLEdsVideoElement: {
        prototype: HTMLEdsVideoElement;
        new (): HTMLEdsVideoElement;
    };
    interface HTMLEdsViewAppEnovosElement extends Components.EdsViewAppEnovos, HTMLStencilElement {
    }
    var HTMLEdsViewAppEnovosElement: {
        prototype: HTMLEdsViewAppEnovosElement;
        new (): HTMLEdsViewAppEnovosElement;
    };
    interface HTMLEdsViewAppEnovosSection404Element extends Components.EdsViewAppEnovosSection404, HTMLStencilElement {
    }
    var HTMLEdsViewAppEnovosSection404Element: {
        prototype: HTMLEdsViewAppEnovosSection404Element;
        new (): HTMLEdsViewAppEnovosSection404Element;
    };
    interface HTMLEdsViewAppEnovosSectionConsumptionElement extends Components.EdsViewAppEnovosSectionConsumption, HTMLStencilElement {
    }
    var HTMLEdsViewAppEnovosSectionConsumptionElement: {
        prototype: HTMLEdsViewAppEnovosSectionConsumptionElement;
        new (): HTMLEdsViewAppEnovosSectionConsumptionElement;
    };
    interface HTMLEdsViewAppEnovosSectionContractDetailsElement extends Components.EdsViewAppEnovosSectionContractDetails, HTMLStencilElement {
    }
    var HTMLEdsViewAppEnovosSectionContractDetailsElement: {
        prototype: HTMLEdsViewAppEnovosSectionContractDetailsElement;
        new (): HTMLEdsViewAppEnovosSectionContractDetailsElement;
    };
    interface HTMLEdsViewAppEnovosSectionContractListElement extends Components.EdsViewAppEnovosSectionContractList, HTMLStencilElement {
    }
    var HTMLEdsViewAppEnovosSectionContractListElement: {
        prototype: HTMLEdsViewAppEnovosSectionContractListElement;
        new (): HTMLEdsViewAppEnovosSectionContractListElement;
    };
    interface HTMLEdsViewAppEnovosSectionContractListEmptyElement extends Components.EdsViewAppEnovosSectionContractListEmpty, HTMLStencilElement {
    }
    var HTMLEdsViewAppEnovosSectionContractListEmptyElement: {
        prototype: HTMLEdsViewAppEnovosSectionContractListEmptyElement;
        new (): HTMLEdsViewAppEnovosSectionContractListEmptyElement;
    };
    interface HTMLEdsViewAppEnovosSectionIAmMovingSingleContractElement extends Components.EdsViewAppEnovosSectionIAmMovingSingleContract, HTMLStencilElement {
    }
    var HTMLEdsViewAppEnovosSectionIAmMovingSingleContractElement: {
        prototype: HTMLEdsViewAppEnovosSectionIAmMovingSingleContractElement;
        new (): HTMLEdsViewAppEnovosSectionIAmMovingSingleContractElement;
    };
    interface HTMLEdsViewAppEnovosSectionInvoicesElement extends Components.EdsViewAppEnovosSectionInvoices, HTMLStencilElement {
    }
    var HTMLEdsViewAppEnovosSectionInvoicesElement: {
        prototype: HTMLEdsViewAppEnovosSectionInvoicesElement;
        new (): HTMLEdsViewAppEnovosSectionInvoicesElement;
    };
    interface HTMLEdsViewAppEnovosSectionLandingPageElement extends Components.EdsViewAppEnovosSectionLandingPage, HTMLStencilElement {
    }
    var HTMLEdsViewAppEnovosSectionLandingPageElement: {
        prototype: HTMLEdsViewAppEnovosSectionLandingPageElement;
        new (): HTMLEdsViewAppEnovosSectionLandingPageElement;
    };
    interface HTMLEdsViewAppEnovosSectionMyAccountMultipleElement extends Components.EdsViewAppEnovosSectionMyAccountMultiple, HTMLStencilElement {
    }
    var HTMLEdsViewAppEnovosSectionMyAccountMultipleElement: {
        prototype: HTMLEdsViewAppEnovosSectionMyAccountMultipleElement;
        new (): HTMLEdsViewAppEnovosSectionMyAccountMultipleElement;
    };
    interface HTMLEdsViewAppEnovosSectionMyAccountSingleElement extends Components.EdsViewAppEnovosSectionMyAccountSingle, HTMLStencilElement {
    }
    var HTMLEdsViewAppEnovosSectionMyAccountSingleElement: {
        prototype: HTMLEdsViewAppEnovosSectionMyAccountSingleElement;
        new (): HTMLEdsViewAppEnovosSectionMyAccountSingleElement;
    };
    interface HTMLEdsViewAppEnovosSectionOverviewElement extends Components.EdsViewAppEnovosSectionOverview, HTMLStencilElement {
    }
    var HTMLEdsViewAppEnovosSectionOverviewElement: {
        prototype: HTMLEdsViewAppEnovosSectionOverviewElement;
        new (): HTMLEdsViewAppEnovosSectionOverviewElement;
    };
    interface HTMLEdsViewAppEnovosSectionOverviewWithSliderElement extends Components.EdsViewAppEnovosSectionOverviewWithSlider, HTMLStencilElement {
    }
    var HTMLEdsViewAppEnovosSectionOverviewWithSliderElement: {
        prototype: HTMLEdsViewAppEnovosSectionOverviewWithSliderElement;
        new (): HTMLEdsViewAppEnovosSectionOverviewWithSliderElement;
    };
    interface HTMLEdsViewportElement extends Components.EdsViewport, HTMLStencilElement {
    }
    var HTMLEdsViewportElement: {
        prototype: HTMLEdsViewportElement;
        new (): HTMLEdsViewportElement;
    };
    interface HTMLElementTagNameMap {
        "eds-action-list": HTMLEdsActionListElement;
        "eds-adaptive-text": HTMLEdsAdaptiveTextElement;
        "eds-advanced-dialog": HTMLEdsAdvancedDialogElement;
        "eds-app-bar": HTMLEdsAppBarElement;
        "eds-app-data-block": HTMLEdsAppDataBlockElement;
        "eds-app-dialog-consumption-download": HTMLEdsAppDialogConsumptionDownloadElement;
        "eds-app-dialog-contracts": HTMLEdsAppDialogContractsElement;
        "eds-app-header": HTMLEdsAppHeaderElement;
        "eds-app-periodic-consumption": HTMLEdsAppPeriodicConsumptionElement;
        "eds-app-quick-actions": HTMLEdsAppQuickActionsElement;
        "eds-assistive-text": HTMLEdsAssistiveTextElement;
        "eds-avatar": HTMLEdsAvatarElement;
        "eds-badge": HTMLEdsBadgeElement;
        "eds-bar-chart": HTMLEdsBarChartElement;
        "eds-bottom-sheet": HTMLEdsBottomSheetElement;
        "eds-button": HTMLEdsButtonElement;
        "eds-card": HTMLEdsCardElement;
        "eds-chart-legend": HTMLEdsChartLegendElement;
        "eds-checkbox": HTMLEdsCheckboxElement;
        "eds-chip": HTMLEdsChipElement;
        "eds-container": HTMLEdsContainerElement;
        "eds-contract-item": HTMLEdsContractItemElement;
        "eds-contract-type-icon": HTMLEdsContractTypeIconElement;
        "eds-data-table": HTMLEdsDataTableElement;
        "eds-data-table-cell": HTMLEdsDataTableCellElement;
        "eds-data-table-header": HTMLEdsDataTableHeaderElement;
        "eds-data-table-heading": HTMLEdsDataTableHeadingElement;
        "eds-data-table-row": HTMLEdsDataTableRowElement;
        "eds-datalist": HTMLEdsDatalistElement;
        "eds-datalist-item": HTMLEdsDatalistItemElement;
        "eds-date-picker": HTMLEdsDatePickerElement;
        "eds-description-list": HTMLEdsDescriptionListElement;
        "eds-dialog": HTMLEdsDialogElement;
        "eds-divider": HTMLEdsDividerElement;
        "eds-dropdown": HTMLEdsDropdownElement;
        "eds-editable-block": HTMLEdsEditableBlockElement;
        "eds-elevation": HTMLEdsElevationElement;
        "eds-expandable-card": HTMLEdsExpandableCardElement;
        "eds-fields-group": HTMLEdsFieldsGroupElement;
        "eds-flex": HTMLEdsFlexElement;
        "eds-flex-item": HTMLEdsFlexItemElement;
        "eds-grid-area": HTMLEdsGridAreaElement;
        "eds-grid-area-item": HTMLEdsGridAreaItemElement;
        "eds-grid-layout": HTMLEdsGridLayoutElement;
        "eds-grid-layout-item": HTMLEdsGridLayoutItemElement;
        "eds-grid-style-one": HTMLEdsGridStyleOneElement;
        "eds-grid-style-two": HTMLEdsGridStyleTwoElement;
        "eds-heading": HTMLEdsHeadingElement;
        "eds-hero": HTMLEdsHeroElement;
        "eds-icon": HTMLEdsIconElement;
        "eds-image": HTMLEdsImageElement;
        "eds-info": HTMLEdsInfoElement;
        "eds-input": HTMLEdsInputElement;
        "eds-input-chip": HTMLEdsInputChipElement;
        "eds-label": HTMLEdsLabelElement;
        "eds-line-chart": HTMLEdsLineChartElement;
        "eds-link": HTMLEdsLinkElement;
        "eds-list": HTMLEdsListElement;
        "eds-loader-skeleton": HTMLEdsLoaderSkeletonElement;
        "eds-logo": HTMLEdsLogoElement;
        "eds-menu": HTMLEdsMenuElement;
        "eds-message": HTMLEdsMessageElement;
        "eds-message-manager": HTMLEdsMessageManagerElement;
        "eds-mobile-data-table": HTMLEdsMobileDataTableElement;
        "eds-motion": HTMLEdsMotionElement;
        "eds-navigation": HTMLEdsNavigationElement;
        "eds-no-results": HTMLEdsNoResultsElement;
        "eds-page-header": HTMLEdsPageHeaderElement;
        "eds-pagination": HTMLEdsPaginationElement;
        "eds-panel": HTMLEdsPanelElement;
        "eds-paragraph": HTMLEdsParagraphElement;
        "eds-positioned-badge": HTMLEdsPositionedBadgeElement;
        "eds-positioned-icon": HTMLEdsPositionedIconElement;
        "eds-pricing-table": HTMLEdsPricingTableElement;
        "eds-progress-bar": HTMLEdsProgressBarElement;
        "eds-quick-action": HTMLEdsQuickActionElement;
        "eds-radio-button": HTMLEdsRadioButtonElement;
        "eds-scrollspy": HTMLEdsScrollspyElement;
        "eds-select": HTMLEdsSelectElement;
        "eds-selection-controls": HTMLEdsSelectionControlsElement;
        "eds-side-sheet": HTMLEdsSideSheetElement;
        "eds-skeleton": HTMLEdsSkeletonElement;
        "eds-slider": HTMLEdsSliderElement;
        "eds-small": HTMLEdsSmallElement;
        "eds-status-icon": HTMLEdsStatusIconElement;
        "eds-steps": HTMLEdsStepsElement;
        "eds-switch": HTMLEdsSwitchElement;
        "eds-tabs": HTMLEdsTabsElement;
        "eds-template-grid-mobile": HTMLEdsTemplateGridMobileElement;
        "eds-text-field": HTMLEdsTextFieldElement;
        "eds-themes-manager": HTMLEdsThemesManagerElement;
        "eds-tooltip": HTMLEdsTooltipElement;
        "eds-upload-dragger": HTMLEdsUploadDraggerElement;
        "eds-uploaded-image": HTMLEdsUploadedImageElement;
        "eds-video": HTMLEdsVideoElement;
        "eds-view-app-enovos": HTMLEdsViewAppEnovosElement;
        "eds-view-app-enovos-section-404": HTMLEdsViewAppEnovosSection404Element;
        "eds-view-app-enovos-section-consumption": HTMLEdsViewAppEnovosSectionConsumptionElement;
        "eds-view-app-enovos-section-contract-details": HTMLEdsViewAppEnovosSectionContractDetailsElement;
        "eds-view-app-enovos-section-contract-list": HTMLEdsViewAppEnovosSectionContractListElement;
        "eds-view-app-enovos-section-contract-list-empty": HTMLEdsViewAppEnovosSectionContractListEmptyElement;
        "eds-view-app-enovos-section-i-am-moving-single-contract": HTMLEdsViewAppEnovosSectionIAmMovingSingleContractElement;
        "eds-view-app-enovos-section-invoices": HTMLEdsViewAppEnovosSectionInvoicesElement;
        "eds-view-app-enovos-section-landing-page": HTMLEdsViewAppEnovosSectionLandingPageElement;
        "eds-view-app-enovos-section-my-account-multiple": HTMLEdsViewAppEnovosSectionMyAccountMultipleElement;
        "eds-view-app-enovos-section-my-account-single": HTMLEdsViewAppEnovosSectionMyAccountSingleElement;
        "eds-view-app-enovos-section-overview": HTMLEdsViewAppEnovosSectionOverviewElement;
        "eds-view-app-enovos-section-overview-with-slider": HTMLEdsViewAppEnovosSectionOverviewWithSliderElement;
        "eds-viewport": HTMLEdsViewportElement;
    }
}
declare namespace LocalJSX {
    interface EdsActionList {
        "actions"?: ActionListItem[];
        "activeAction"?: string;
        "fitted"?: boolean;
        "onClickActionItem"?: (event: CustomEvent<any>) => void;
        "segmented"?: boolean;
        "size"?: string;
    }
    interface EdsAdaptiveText {
        "clampLines"?: number;
        "content": string;
        "font"?: string;
        "fontStyle"?: string;
        "fontWeight"?: string;
        "styles"?: string;
        "super"?: any;
        "type"?: string;
    }
    interface EdsAdvancedDialog {
        "bodyScrollDisabled"?: boolean;
        "footerWithShadow"?: boolean;
        "headerIconUrl"?: string;
        "headerSubtitle"?: string;
        "headerTitle"?: string;
        "headerWithShadow"?: boolean;
        "onClose"?: (event: CustomEvent<any>) => void;
        "verticalAlignment"?: string;
    }
    interface EdsAppBar {
        "fluid"?: boolean;
        "position"?: string;
    }
    interface EdsAppDataBlock {
        "data"?: AppDataBlock;
        "onClickDataBlock"?: (event: CustomEvent<any>) => void;
    }
    interface EdsAppDialogConsumptionDownload {
    }
    interface EdsAppDialogContracts {
        "items"?: AppDialogContractsItem[];
        "locale"?: {
    title?: string;
    search?: string;
    filterByCustomers?: string;
    allCustomers?: string;
  };
        "onClickRow"?: (event: CustomEvent<any>) => void;
        "onClose"?: (event: CustomEvent<any>) => void;
        "styles"?: string;
    }
    interface EdsAppHeader {
        "showBackBtn"?: boolean;
    }
    interface EdsAppPeriodicConsumption {
        "chartMaxValue"?: number;
        "chartMinValue"?: number;
        "chartValue"?: number;
        "firstItemCaptionIcon"?: string;
        "firstItemCaptionStyles"?: string;
        "firstItemCaptionText"?: string;
        "firstItemTitle"?: string;
        "firstItemValue"?: string;
        "secondItemCaptionIcon"?: string;
        "secondItemCaptionStyles"?: string;
        "secondItemCaptionText"?: string;
        "secondItemTitle"?: string;
        "secondItemValue"?: string;
        "styles"?: string;
    }
    interface EdsAppQuickActions {
        "data"?: AppQuickAction;
        "onClickQuickAction"?: (event: CustomEvent<any>) => void;
        "styles"?: string;
    }
    interface EdsAssistiveText {
        "code"?: string;
        "icon"?: string;
        "message"?: string;
        "styles"?: string;
        "type"?: string;
    }
    interface EdsAvatar {
        "elevationLevel"?: string;
        "elevationStyle"?: string;
        "icon"?: string;
        "iconStyle"?: string;
        "size"?: string;
        "src"?: string;
    }
    interface EdsBadge {
        "mediaLeading"?: string;
        "rounded"?: boolean;
        "size"?: string;
        "styles"?: string;
        "text"?: string;
    }
    interface EdsBarChart {
        "barRadius"?: number;
        "data"?: IDataset;
        "height"?: number;
        "minWidth"?: number;
        "renderDelay"?: number;
        "showHorizontalGridLines"?: boolean;
        "showVerticalGridLines"?: boolean;
        "xValues"?: string[];
        "yMaxValue"?: number;
        "yMinValue"?: number;
    }
    interface EdsBottomSheet {
        "backdrop"?: boolean;
        "moveTo"?: string;
        "onSwipe"?: (event: CustomEvent<any>) => void;
        "position"?: string;
        "steps"?: number[];
    }
    interface EdsButton {
        "content"?: string;
        "disabled"?: boolean;
        "expand"?: boolean;
        "grouped"?: boolean;
        "iconPosition"?: string;
        "iconStyles"?: string;
        "isHover"?: boolean;
        "narrow"?: boolean;
        "onClickButton"?: (event: CustomEvent<any>) => void;
        "outlined"?: boolean;
        "rounded"?: boolean;
        "size"?: string;
        "squared"?: boolean;
        "styles"?: string;
        "textOnly"?: boolean;
        "type"?: string;
    }
    interface EdsCard {
        "backgroundContent"?: string;
        "backgroundImage"?: string;
        "backgroundMedia"?: string;
        "clickable"?: boolean;
        "columns"?: number;
        "columnsMedia"?: number;
        "direction"?: string;
        "noBorder"?: boolean;
        "onClickCard"?: (event: CustomEvent<any>) => void;
        "overlay"?: boolean;
        "overlayMedia"?: string;
        "size"?: string;
        "styles"?: string;
        "trailingMedia"?: boolean;
        "verticalAlignment"?: 'top' | 'center' | 'bottom';
        "video"?: string;
        "videoAutoplay"?: boolean;
        "videoLoop"?: boolean;
        "videoPlay"?: boolean;
    }
    interface EdsChartLegend {
        "items"?: ILegendItem[];
    }
    interface EdsCheckbox {
        "disabled"?: boolean;
        "indeterminate"?: boolean;
        "inputName": string;
        "label"?: string;
        "onClickCheckbox"?: (event: CustomEvent<any>) => void;
        "selected"?: boolean;
        "size"?: string;
        "styles"?: string;
        "value"?: string;
    }
    interface EdsChip {
        "disabled"?: boolean;
        "inputName"?: string;
        "label": string;
        "leadingType"?: string;
        "leadingValue"?: string;
        "motionless"?: boolean;
        "onClickChip"?: (event: CustomEvent<any>) => void;
        "onClickTrailing"?: (event: CustomEvent<any>) => void;
        "readOnly"?: boolean;
        "selected"?: boolean;
        "size"?: string;
        "sizeAvatar"?: string;
        "styles"?: string;
        "trailingEvent"?: boolean;
        "trailingType"?: string;
        "trailingValue"?: string;
        "uid"?: string;
        "unselectable"?: boolean;
        "value"?: string;
    }
    interface EdsContainer {
        "center"?: boolean;
        "fluid"?: boolean;
        "fluidForce"?: string;
        "fullHeight"?: boolean;
        "noPadding"?: boolean;
        "size"?: string;
    }
    interface EdsContractItem {
        "contractAddress"?: string;
        "contractId"?: string;
        "customerId"?: string;
        "customerName"?: string;
        "isCheckable"?: boolean;
        "isChecked"?: boolean;
        "onClickItem"?: (event: CustomEvent<any>) => void;
        "onClickItemCheckbox"?: (event: CustomEvent<any>) => void;
        "status"?: 'open' | 'closed';
        "styles"?: string;
        "type"?: 'electricity' | 'producer' | 'gas';
    }
    interface EdsContractTypeIcon {
        "type"?: 'electricity' | 'producer' | 'gas';
    }
    interface EdsDataTable {
        "checkable"?: boolean;
        "columnRenderers"?: ((value: any) => any)[];
        "columnSizes"?: string[];
        "columns"?: string[];
        "data"?: DataTableValues[];
        "hasIndentedColumn"?: boolean;
        "hideIndentedHeader"?: boolean;
        "maxHeight"?: string;
        "onActiveHeaderDropdown"?: (event: CustomEvent<any>) => void;
        "onActiveRowDropdown"?: (event: CustomEvent<any>) => void;
        "onClickRowCellButton"?: (event: CustomEvent<any>) => void;
        "onDidRender"?: (event: CustomEvent<any>) => void;
        "pagination"?: Pagination;
        "size"?: string;
        "sort"?: boolean[];
        "stickyElevation"?: string;
        "styles"?: string;
    }
    interface EdsDataTableCell {
        "contentSize"?: string;
        "data"?: CellItem;
        "fitted"?: boolean;
        "index"?: number;
        "onClickRowButton"?: (event: CustomEvent<any>) => void;
        "onClickRowDropdown"?: (event: CustomEvent<any>) => void;
        "onClickRowIcon"?: (event: CustomEvent<any>) => void;
        "renderer"?: (value: any) => any;
        "rowId"?: string;
        "size"?: string;
        "styles"?: string;
    }
    interface EdsDataTableHeader {
        "checkable"?: boolean;
        "columnSizes"?: string[];
        "columns"?: string[];
        "expandable"?: boolean;
        "hasIndentedColumn"?: boolean;
        "maxHeight"?: string;
        "onClickHeaderCheckbox"?: (event: CustomEvent<any>) => void;
        "onClickHeaderDropdown"?: (event: CustomEvent<any>) => void;
        "onClickSortColumn"?: (event: CustomEvent<any>) => void;
        "size"?: string;
        "sort"?: boolean[];
        "styles"?: string;
    }
    interface EdsDataTableHeading {
        "checkable"?: boolean;
        "checkedRows"?: number;
        "columnSizes"?: any[];
        "columns"?: any[];
        "hasIndentedColumn"?: boolean;
        "size"?: string;
        "styles"?: string;
    }
    interface EdsDataTableRow {
        "checkable"?: boolean;
        "columnRenderers"?: ((value: any) => any)[];
        "columnSizes"?: any[];
        "data"?: { id: any; values: any[]; children: any[]; selected: boolean; };
        "expandable"?: boolean;
        "hasIndentedColumn"?: boolean;
        "maxHeight"?: string;
        "onClickExpand"?: (event: CustomEvent<any>) => void;
        "onClickRowCheckbox"?: (event: CustomEvent<any>) => void;
        "size"?: string;
    }
    interface EdsDatalist {
        "alternate"?: boolean;
        "alternateReverse"?: boolean;
        "clickable"?: boolean;
        "items"?: DatalistItem[];
        "onClickDatalist"?: (event: CustomEvent<any>) => void;
        "padding"?: string;
        "styles"?: string;
    }
    interface EdsDatalistItem {
        "clickable"?: boolean;
        "collapsed"?: boolean;
        "expandable"?: boolean;
        "indent"?: number;
        "onClickDatalistItem"?: (event: CustomEvent<any>) => void;
        "padding"?: string;
        "styles"?: string;
    }
    interface EdsDatePicker {
        "beginDate"?: any;
        "elevationLevel"?: string;
        "elevationStyles"?: string;
        "endDate"?: any;
        "isRanged"?: boolean;
        "locale"?: string;
        "maxDate"?: string;
        "minDate"?: string;
        "onClickDatePicker"?: (event: CustomEvent<any>) => void;
        "selectedDate"?: any;
        "styles"?: string;
    }
    interface EdsDescriptionList {
        "data"?: any[];
        "isHorizontal"?: boolean;
        "isInline"?: boolean;
    }
    interface EdsDialog {
        "columns"?: number;
        "columnsFluid"?: boolean;
        "disableAnimations"?: boolean;
        "disableScroll"?: boolean;
        "ignoreBackdropClick"?: boolean;
        "onClickBackdropHandler"?: (event: CustomEvent<any>) => void;
        "size"?: string;
        "verticalAlignment"?: string;
    }
    interface EdsDivider {
        "content"?: string;
        "styles"?: string;
    }
    interface EdsDropdown {
        "activeItem"?: string;
        "alignRight"?: boolean;
        "autocompleteMinChars"?: number;
        "autocompleteOnFocus"?: boolean;
        "data"?: any[];
        "elevationLevel"?: string;
        "elevationReverse"?: boolean;
        "elevationStyles"?: string;
        "font"?: string;
        "hasSubItems"?: boolean;
        "indented"?: boolean;
        "onActiveSelectorItem"?: (event: CustomEvent<any>) => void;
        "onClickDropdownItem"?: (event: CustomEvent<any>) => void;
        "parent"?: DropdownItem;
        "placement"?: string;
        "readOnly"?: boolean;
        "selectionControls"?: SelectionControls;
        "size"?: string;
        "styles"?: string;
        "subItemHorizontalPlacement"?: string;
        "subItemVerticalPlacement"?: string;
        "visibleItems"?: number;
    }
    interface EdsEditableBlock {
        "color"?: string;
        "componentConfig"?: EditableBlockConfig[];
        "data"?: EditableBlockData;
        "onChangeBlock"?: (event: CustomEvent<any>) => void;
        "onClickAction"?: (event: CustomEvent<any>) => void;
    }
    interface EdsElevation {
        "level"?: string;
        "reverse"?: boolean;
        "styles"?: string;
    }
    interface EdsExpandableCard {
        "hideCheckbox"?: boolean;
        "hideContentIfUnchecked"?: boolean;
        "icon"?: string;
        "inputName"?: string;
        "inputValue"?: string;
        "isDefaultChecked"?: boolean;
        "isDisabled"?: boolean;
        "isRadio"?: boolean;
        "mainTitle"?: string;
        "onClickCheckbox"?: (event: CustomEvent<any>) => void;
        "styles"?: string;
        "subtitle"?: string;
    }
    interface EdsFieldsGroup {
        "mainTitle"?: string;
        "tooltipContent"?: string;
    }
    interface EdsFlex {
        "nested"?: boolean;
    }
    interface EdsFlexItem {
    }
    interface EdsGridArea {
        "hasFooter"?: boolean;
        "hasHeader"?: boolean;
        "styles"?: string;
    }
    interface EdsGridAreaItem {
        "area"?: string;
        "styles"?: string;
    }
    interface EdsGridLayout {
        "alignCenter"?: boolean;
        "alignVertical"?: 'top' | 'center' | 'bottom';
        "fitHeight"?: boolean;
        "recursive"?: boolean;
        "styles"?: string;
    }
    interface EdsGridLayoutItem {
        "alignContent"?: 'left' | 'center' | 'right';
        "animation"?: boolean;
        "stretchColumn"?: boolean;
        "styles"?: string;
    }
    interface EdsGridStyleOne {
        "backgroundBody"?: string;
        "backgroundFooter"?: string;
        "backgroundHeader"?: string;
        "backgroundImageBody"?: string;
        "backgroundMainFooter"?: string;
        "backgroundNavigation"?: string;
        "bodyAlignCenter"?: boolean;
        "borderColorFooter"?: string;
        "footer"?: boolean;
        "header"?: boolean;
        "main"?: boolean;
        "mainFooter"?: boolean;
        "navigation"?: boolean;
        "onScrollDown"?: (event: CustomEvent<any>) => void;
    }
    interface EdsGridStyleTwo {
        "backgroundBody"?: string;
        "backgroundFooter"?: string;
        "backgroundHeader"?: string;
        "backgroundImageBody"?: string;
        "backgroundMainFooter"?: string;
        "backgroundNavigation"?: string;
        "bodyAlignCenter"?: boolean;
        "borderColorFooter"?: string;
        "debug"?: boolean;
        "footer"?: boolean;
        "header"?: boolean;
        "main"?: boolean;
        "mainFooter"?: boolean;
        "navigation"?: boolean;
    }
    interface EdsHeading {
        "content"?: string;
        "font"?: string;
        "fontWeight"?: string;
        "styles"?: string;
        "type"?: string;
    }
    interface EdsHero {
        "content"?: string;
        "font"?: string;
        "fontWeight"?: string;
        "styles"?: string;
        "super"?: any;
    }
    interface EdsIcon {
        "icon": string;
        "size"?: string;
        "styles"?: string;
    }
    interface EdsImage {
        "alt"?: string;
        "notFitted"?: boolean;
        "size"?: string;
        "src": string;
    }
    interface EdsInfo {
        "infoStyles"?: string;
        "infoText"?: string;
        "infoTooltipIcon"?: string;
        "infoTooltipNotimeout"?: boolean;
        "infoTooltipPointer"?: boolean;
        "infoTooltipSize"?: string;
        "infoTooltipStyles"?: string;
        "infoTooltipText"?: string;
        "infoTooltipTimeoutValue"?: number;
    }
    interface EdsInput {
        "dataName"?: string;
        "dataValue"?: string;
        "debounce"?: number;
        "disabled"?: boolean;
        "ellipsis"?: boolean;
        "onBlurInput"?: (event: CustomEvent<any>) => void;
        "onChangeFileInput"?: (event: CustomEvent<any>) => void;
        "onChangeInput"?: (event: CustomEvent<any>) => void;
        "onFocusInput"?: (event: CustomEvent<any>) => void;
        "onInputInput"?: (event: CustomEvent<any>) => void;
        "placeholder"?: string;
        "readOnly"?: boolean;
        "size"?: string;
        "step"?: string;
        "styles"?: string;
        "type"?: string;
    }
    interface EdsInputChip {
        "data"?: any[];
        "iconLeading"?: string;
        "iconTrailing"?: string;
        "readOnly"?: boolean;
        "selectionControlType"?: any;
        "size"?: string;
        "sizeAvatar"?: string;
        "stacked"?: boolean;
        "styles"?: string;
        "trailingType"?: string;
        "trailingValue"?: string;
    }
    interface EdsLabel {
        "disabled"?: boolean;
        "required"?: boolean;
        "size"?: string;
        "styles"?: string;
    }
    interface EdsLineChart {
        "datasets"?: IDataset[];
        "height"?: number;
        "margin"?: { top: number; right: number; bottom: number; left: number; };
        "minWidth"?: number;
        "renderDelay"?: number;
        "showHorizontalGridLines"?: boolean;
        "showVerticalGridLines"?: boolean;
        "showYAverageLine"?: false;
        "smallDots"?: boolean;
        "xAxisTicks"?: number;
        "xAxisTitle"?: string;
        "xValues"?: string[];
        "yAverageLegend"?: string;
        "yAxisTitle"?: string;
        "yMaxValue"?: number;
        "yMinValue"?: number;
    }
    interface EdsLink {
        "content"?: string;
        "fontWeight"?: string;
        "iconPosition"?: string;
        "mailto"?: string;
        "onClickLink"?: (event: CustomEvent<any>) => void;
        "size"?: string;
        "styles"?: string;
        "target"?: string;
        "underline"?: boolean;
        "url"?: string;
    }
    interface EdsList {
        "align"?: string;
        "icon"?: string;
        "iconStyles"?: string;
        "items"?: ListItem[];
        "typographyCategory"?: string;
    }
    interface EdsLoaderSkeleton {
        "shape"?: 'circle' | 'card' | 'square';
        "shimmer"?: boolean;
        "size"?: string;
        "stretch"?: boolean;
    }
    interface EdsLogo {
        "classNames"?: { LOGO: string; };
        "height"?: string;
        "variations"?: any[];
        "viewBox"?: string;
        "width"?: string;
    }
    interface EdsMenu {
        "activeItem"?: string;
        "disabledItem"?: boolean;
        "iconOnly"?: boolean;
        "indented"?: boolean;
        "items"?: MenuItem[];
        "level"?: number;
        "onClickMenuItem"?: (event: CustomEvent<any>) => void;
        "size"?: string;
        "styles"?: string;
    }
    interface EdsMessage {
        "clickable"?: boolean;
        "columns"?: number;
        "columnsFluid"?: boolean;
        "fontSize"?: string;
        "fontWeight"?: string;
        "iconLeading"?: string;
        "iconStyles"?: string;
        "inline"?: boolean;
        "onClickButtonItem"?: (event: CustomEvent<any>) => void;
        "styles"?: string;
        "textOnly"?: boolean;
    }
    interface EdsMessageManager {
        "columns"?: number;
        "columnsFluid"?: boolean;
        "onClickMessageButtonItem"?: (event: CustomEvent<any>) => void;
        "position"?: string;
        "verticalOffset"?: string;
    }
    interface EdsMobileDataTable {
        "columns"?: string[];
        "columnsCountLg"?: number;
        "columnsCountMd"?: number;
        "columnsCountSm"?: number;
        "columnsCountXlg"?: number;
        "columnsCountXs"?: number;
        "data"?: any[];
    }
    interface EdsMotion {
        "animationData"?: any;
        "autoplay"?: boolean;
        "loop"?: boolean;
        "path"?: string;
        "size"?: string;
    }
    interface EdsNavigation {
        "activeItem"?: string;
        "fontSize"?: string;
        "fontWeight"?: string;
        "iconOnly"?: boolean;
        "items"?: NavigationItem[];
        "noBorder"?: boolean;
        "onClickNavItem"?: (event: CustomEvent<any>) => void;
        "position"?: string;
        "shrink"?: boolean;
        "size"?: string;
        "styles"?: string;
        "textOnly"?: boolean;
    }
    interface EdsNoResults {
        "imageUrl"?: string;
        "mainTitle"?: string;
        "subtitle"?: string;
    }
    interface EdsPageHeader {
        "centered"?: boolean;
        "pageTitle"?: string;
    }
    interface EdsPagination {
        "buttonActiveStyle"?: string;
        "config"?: Pagination;
        "current"?: number;
        "onClickPaginationItem"?: (event: CustomEvent<any>) => void;
        "outlined"?: boolean;
        "size"?: string;
        "styles"?: string;
    }
    interface EdsPanel {
        "bodyPaddingBottom"?: PaddingSize;
        "bodyPaddingLeft"?: PaddingSize;
        "bodyPaddingRight"?: PaddingSize;
        "bodyPaddingTop"?: PaddingSize;
        "footerPaddingBottom"?: PaddingSize;
        "footerPaddingLeft"?: PaddingSize;
        "footerPaddingRight"?: PaddingSize;
        "footerPaddingTop"?: PaddingSize;
        "fullHeight"?: boolean;
        "headerNoMinHeight"?: boolean;
        "headerPaddingBottom"?: PaddingSize;
        "headerPaddingLeft"?: PaddingSize;
        "headerPaddingRight"?: PaddingSize;
        "headerPaddingTop"?: PaddingSize;
        "headerSubtitle"?: string;
        "headerTitle"?: string;
        "headerWithShadow"?: boolean;
    }
    interface EdsParagraph {
        "clampLines"?: number;
        "clampVisibility"?: number;
        "content"?: string;
        "font"?: string;
        "fontStyle"?: string;
        "fontWeight"?: string;
        "styles"?: string;
        "type": string;
    }
    interface EdsPositionedBadge {
        "additionalMargin"?: string;
        "alignment"?: string;
        "corner"?: boolean;
        "position"?: string;
        "rounded"?: boolean;
        "size"?: string;
        "styles"?: string;
        "text"?: string;
    }
    interface EdsPositionedIcon {
        "additionalMargin"?: string;
        "alignment"?: string;
        "backgroundColor"?: string;
        "bgColor"?: string;
        "corner"?: boolean;
        "icon"?: string;
        "position"?: string;
        "rounded"?: boolean;
        "size"?: string;
        "styles"?: string;
    }
    interface EdsPricingTable {
        "inputName"?: string;
        "items"?: PricingTableItem[];
        "locale"?: {
    perMonth?: string;
    perYear?: string;
    recommended?: string;
  };
        "onClickItem"?: (event: CustomEvent<any>) => void;
        "recommendedItem"?: string;
        "selectedItem"?: string;
        "styles"?: string;
    }
    interface EdsProgressBar {
        "animated"?: boolean;
        "graduated"?: boolean;
        "leadingText"?: string;
        "light"?: boolean;
        "progressMax": number;
        "progressValue": number;
        "styles"?: string;
        "titleText"?: string;
        "trailingText"?: string;
    }
    interface EdsQuickAction {
        "icon"?: string;
        "mainTitle"?: string;
        "onClickItem"?: (event: CustomEvent<any>) => void;
        "showTrailingIcon"?: boolean;
        "styles"?: string;
        "subtitle"?: string;
    }
    interface EdsRadioButton {
        "disabled"?: boolean;
        "icon"?: string;
        "inputName": string;
        "label"?: string;
        "onClickRadioButton"?: (event: CustomEvent<any>) => void;
        "selected"?: boolean;
        "size"?: string;
        "styles"?: string;
        "value"?: string;
    }
    interface EdsScrollspy {
        "items"?: ScrollspyItem[];
        "target"?: string;
    }
    interface EdsSelect {
        "dataName"?: string;
        "dataValue"?: string;
        "disabled"?: boolean;
        "onChangeInput"?: (event: CustomEvent<any>) => void;
        "options"?: string[];
        "required"?: boolean;
        "styles"?: string;
    }
    interface EdsSelectionControls {
        "activeItem"?: string;
        "data"?: SelectionControlsItem[];
        "indented"?: boolean;
        "onClickSelectionControlItem"?: (event: CustomEvent<any>) => void;
        "onClickSelectionControls"?: (event: CustomEvent<any>) => void;
        "refresh"?: number;
        "type"?: string;
    }
    interface EdsSideSheet {
        "backdrop"?: boolean;
        "elevationLevel"?: string;
        "elevationStyle"?: string;
        "ignoreBackdropClick"?: boolean;
        "onCloseSideSheetHandler"?: (event: CustomEvent<any>) => void;
        "position"?: string;
        "size"?: string;
    }
    interface EdsSkeleton {
        "height"?: string;
        "rounded"?: boolean;
        "width"?: string;
    }
    interface EdsSlider {
        "onSlideChange"?: (event: CustomEvent<any>) => void;
        "slidesPerView"?: number | 'auto';
    }
    interface EdsSmall {
        "content"?: string;
        "font"?: string;
        "fontStyle"?: string;
        "fontWeight"?: string;
        "styles"?: string;
    }
    interface EdsStatusIcon {
        "status"?: 'open' | 'closed';
        "text"?: string;
    }
    interface EdsSteps {
        "activeItemId"?: string;
        "items"?: IStep[];
        "itemsClickable"?: boolean;
        "onClickStep"?: (event: CustomEvent<any>) => void;
        "styles"?: string;
    }
    interface EdsSwitch {
        "checked"?: boolean;
        "disabled"?: boolean;
        "elevationLevel"?: string;
        "inputName": string;
        "label"?: string;
        "onClickSwitch"?: (event: CustomEvent<any>) => void;
        "size"?: string;
        "styles"?: string;
        "value"?: string;
    }
    interface EdsTabs {
        "activeItem"?: string;
        "backgroundStyles"?: string;
        "border"?: boolean;
        "items"?: TabsItem[];
        "onClickTabsItem"?: (event: CustomEvent<any>) => void;
        "separated"?: boolean;
        "shrink"?: boolean;
        "styles"?: string;
    }
    interface EdsTemplateGridMobile {
        "bgVideo"?: string;
        "styles"?: string;
    }
    interface EdsTextField {
        "assistiveText"?: string;
        "chips"?: InputChipItem[];
        "clearButton"?: boolean;
        "dataName"?: string;
        "dataValue"?: string;
        "debounce"?: number;
        "disabled"?: boolean;
        "ellipsis"?: boolean;
        "forgetLink"?: boolean;
        "forgetLinkText"?: string;
        "iconAssistiveText"?: string;
        "iconLeading"?: string;
        "iconTrailing"?: string;
        "infoStyles"?: string;
        "infoText"?: string;
        "infoTooltipIcon"?: string;
        "infoTooltipNotimeout"?: boolean;
        "infoTooltipPointer"?: boolean;
        "infoTooltipSize"?: string;
        "infoTooltipStyles"?: string;
        "infoTooltipText"?: string;
        "infoTooltipTimeoutValue"?: number;
        "label"?: string;
        "labelInside"?: string;
        "labelStyles"?: string;
        "onChangeFiles"?: (event: CustomEvent<any>) => void;
        "onCleaningField"?: (event: CustomEvent<any>) => void;
        "onClickButtonTrailing"?: (event: CustomEvent<any>) => void;
        "onClickForgetPassword"?: (event: CustomEvent<any>) => void;
        "onClickIconLeading"?: (event: CustomEvent<any>) => void;
        "onClickIconTrailing"?: (event: CustomEvent<any>) => void;
        "onTypingField"?: (event: CustomEvent<any>) => void;
        "options"?: string[];
        "placeholder"?: string;
        "readOnly"?: boolean;
        "rounded"?: boolean;
        "size"?: string;
        "stacked"?: boolean;
        "step"?: string;
        "styles"?: string;
        "tabItems"?: TabsItem[];
        "trailingButton"?: any;
        "type"?: string;
    }
    interface EdsThemesManager {
    }
    interface EdsTooltip {
        "autoInit"?: boolean;
        "elevationLevel"?: string;
        "elevationStyle"?: string;
        "notimeout"?: boolean;
        "placement"?: string;
        "pointer"?: boolean;
        "selector": string;
        "size"?: string;
        "styles"?: string;
        "text": string;
        "timeoutValue"?: number;
    }
    interface EdsUploadDragger {
        "height"?: string;
        "styles"?: string;
        "width"?: string;
    }
    interface EdsUploadedImage {
        "fileName"?: string;
        "fileSize"?: string;
        "height"?: string;
        "imageSrc"?: string;
        "onClickRemove"?: (event: CustomEvent<any>) => void;
        "onClickView"?: (event: CustomEvent<any>) => void;
        "overlayDisabled"?: boolean;
        "variation"?: string;
        "width"?: string;
    }
    interface EdsVideo {
        "cover"?: boolean;
        "fitted"?: boolean;
        "height"?: string;
        "path": string;
        "playOnClick"?: boolean;
        "posterPath"?: string;
        "preload"?: string;
        "type": string;
        "videoAutoplay"?: boolean;
        "videoControls"?: boolean;
        "videoFullWidth"?: boolean;
        "videoLoop"?: boolean;
        "videoMuted"?: boolean;
        "width"?: string;
    }
    interface EdsViewAppEnovos {
    }
    interface EdsViewAppEnovosSection404 {
    }
    interface EdsViewAppEnovosSectionConsumption {
        "brand"?: string;
    }
    interface EdsViewAppEnovosSectionContractDetails {
    }
    interface EdsViewAppEnovosSectionContractList {
        "brand"?: string;
        "consumptionDownloadItems"?: any[];
    }
    interface EdsViewAppEnovosSectionContractListEmpty {
    }
    interface EdsViewAppEnovosSectionIAmMovingSingleContract {
        "brand"?: string;
    }
    interface EdsViewAppEnovosSectionInvoices {
        "brand"?: string;
    }
    interface EdsViewAppEnovosSectionLandingPage {
        "brand"?: string;
    }
    interface EdsViewAppEnovosSectionMyAccountMultiple {
        "brand"?: string;
        "variation"?: string;
    }
    interface EdsViewAppEnovosSectionMyAccountSingle {
        "brand"?: string;
        "variation"?: string;
    }
    interface EdsViewAppEnovosSectionOverview {
        "brand"?: string;
    }
    interface EdsViewAppEnovosSectionOverviewWithSlider {
        "brand"?: string;
    }
    interface EdsViewport {
    }
    interface IntrinsicElements {
        "eds-action-list": EdsActionList;
        "eds-adaptive-text": EdsAdaptiveText;
        "eds-advanced-dialog": EdsAdvancedDialog;
        "eds-app-bar": EdsAppBar;
        "eds-app-data-block": EdsAppDataBlock;
        "eds-app-dialog-consumption-download": EdsAppDialogConsumptionDownload;
        "eds-app-dialog-contracts": EdsAppDialogContracts;
        "eds-app-header": EdsAppHeader;
        "eds-app-periodic-consumption": EdsAppPeriodicConsumption;
        "eds-app-quick-actions": EdsAppQuickActions;
        "eds-assistive-text": EdsAssistiveText;
        "eds-avatar": EdsAvatar;
        "eds-badge": EdsBadge;
        "eds-bar-chart": EdsBarChart;
        "eds-bottom-sheet": EdsBottomSheet;
        "eds-button": EdsButton;
        "eds-card": EdsCard;
        "eds-chart-legend": EdsChartLegend;
        "eds-checkbox": EdsCheckbox;
        "eds-chip": EdsChip;
        "eds-container": EdsContainer;
        "eds-contract-item": EdsContractItem;
        "eds-contract-type-icon": EdsContractTypeIcon;
        "eds-data-table": EdsDataTable;
        "eds-data-table-cell": EdsDataTableCell;
        "eds-data-table-header": EdsDataTableHeader;
        "eds-data-table-heading": EdsDataTableHeading;
        "eds-data-table-row": EdsDataTableRow;
        "eds-datalist": EdsDatalist;
        "eds-datalist-item": EdsDatalistItem;
        "eds-date-picker": EdsDatePicker;
        "eds-description-list": EdsDescriptionList;
        "eds-dialog": EdsDialog;
        "eds-divider": EdsDivider;
        "eds-dropdown": EdsDropdown;
        "eds-editable-block": EdsEditableBlock;
        "eds-elevation": EdsElevation;
        "eds-expandable-card": EdsExpandableCard;
        "eds-fields-group": EdsFieldsGroup;
        "eds-flex": EdsFlex;
        "eds-flex-item": EdsFlexItem;
        "eds-grid-area": EdsGridArea;
        "eds-grid-area-item": EdsGridAreaItem;
        "eds-grid-layout": EdsGridLayout;
        "eds-grid-layout-item": EdsGridLayoutItem;
        "eds-grid-style-one": EdsGridStyleOne;
        "eds-grid-style-two": EdsGridStyleTwo;
        "eds-heading": EdsHeading;
        "eds-hero": EdsHero;
        "eds-icon": EdsIcon;
        "eds-image": EdsImage;
        "eds-info": EdsInfo;
        "eds-input": EdsInput;
        "eds-input-chip": EdsInputChip;
        "eds-label": EdsLabel;
        "eds-line-chart": EdsLineChart;
        "eds-link": EdsLink;
        "eds-list": EdsList;
        "eds-loader-skeleton": EdsLoaderSkeleton;
        "eds-logo": EdsLogo;
        "eds-menu": EdsMenu;
        "eds-message": EdsMessage;
        "eds-message-manager": EdsMessageManager;
        "eds-mobile-data-table": EdsMobileDataTable;
        "eds-motion": EdsMotion;
        "eds-navigation": EdsNavigation;
        "eds-no-results": EdsNoResults;
        "eds-page-header": EdsPageHeader;
        "eds-pagination": EdsPagination;
        "eds-panel": EdsPanel;
        "eds-paragraph": EdsParagraph;
        "eds-positioned-badge": EdsPositionedBadge;
        "eds-positioned-icon": EdsPositionedIcon;
        "eds-pricing-table": EdsPricingTable;
        "eds-progress-bar": EdsProgressBar;
        "eds-quick-action": EdsQuickAction;
        "eds-radio-button": EdsRadioButton;
        "eds-scrollspy": EdsScrollspy;
        "eds-select": EdsSelect;
        "eds-selection-controls": EdsSelectionControls;
        "eds-side-sheet": EdsSideSheet;
        "eds-skeleton": EdsSkeleton;
        "eds-slider": EdsSlider;
        "eds-small": EdsSmall;
        "eds-status-icon": EdsStatusIcon;
        "eds-steps": EdsSteps;
        "eds-switch": EdsSwitch;
        "eds-tabs": EdsTabs;
        "eds-template-grid-mobile": EdsTemplateGridMobile;
        "eds-text-field": EdsTextField;
        "eds-themes-manager": EdsThemesManager;
        "eds-tooltip": EdsTooltip;
        "eds-upload-dragger": EdsUploadDragger;
        "eds-uploaded-image": EdsUploadedImage;
        "eds-video": EdsVideo;
        "eds-view-app-enovos": EdsViewAppEnovos;
        "eds-view-app-enovos-section-404": EdsViewAppEnovosSection404;
        "eds-view-app-enovos-section-consumption": EdsViewAppEnovosSectionConsumption;
        "eds-view-app-enovos-section-contract-details": EdsViewAppEnovosSectionContractDetails;
        "eds-view-app-enovos-section-contract-list": EdsViewAppEnovosSectionContractList;
        "eds-view-app-enovos-section-contract-list-empty": EdsViewAppEnovosSectionContractListEmpty;
        "eds-view-app-enovos-section-i-am-moving-single-contract": EdsViewAppEnovosSectionIAmMovingSingleContract;
        "eds-view-app-enovos-section-invoices": EdsViewAppEnovosSectionInvoices;
        "eds-view-app-enovos-section-landing-page": EdsViewAppEnovosSectionLandingPage;
        "eds-view-app-enovos-section-my-account-multiple": EdsViewAppEnovosSectionMyAccountMultiple;
        "eds-view-app-enovos-section-my-account-single": EdsViewAppEnovosSectionMyAccountSingle;
        "eds-view-app-enovos-section-overview": EdsViewAppEnovosSectionOverview;
        "eds-view-app-enovos-section-overview-with-slider": EdsViewAppEnovosSectionOverviewWithSlider;
        "eds-viewport": EdsViewport;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "eds-action-list": LocalJSX.EdsActionList & JSXBase.HTMLAttributes<HTMLEdsActionListElement>;
            "eds-adaptive-text": LocalJSX.EdsAdaptiveText & JSXBase.HTMLAttributes<HTMLEdsAdaptiveTextElement>;
            "eds-advanced-dialog": LocalJSX.EdsAdvancedDialog & JSXBase.HTMLAttributes<HTMLEdsAdvancedDialogElement>;
            "eds-app-bar": LocalJSX.EdsAppBar & JSXBase.HTMLAttributes<HTMLEdsAppBarElement>;
            "eds-app-data-block": LocalJSX.EdsAppDataBlock & JSXBase.HTMLAttributes<HTMLEdsAppDataBlockElement>;
            "eds-app-dialog-consumption-download": LocalJSX.EdsAppDialogConsumptionDownload & JSXBase.HTMLAttributes<HTMLEdsAppDialogConsumptionDownloadElement>;
            "eds-app-dialog-contracts": LocalJSX.EdsAppDialogContracts & JSXBase.HTMLAttributes<HTMLEdsAppDialogContractsElement>;
            "eds-app-header": LocalJSX.EdsAppHeader & JSXBase.HTMLAttributes<HTMLEdsAppHeaderElement>;
            "eds-app-periodic-consumption": LocalJSX.EdsAppPeriodicConsumption & JSXBase.HTMLAttributes<HTMLEdsAppPeriodicConsumptionElement>;
            "eds-app-quick-actions": LocalJSX.EdsAppQuickActions & JSXBase.HTMLAttributes<HTMLEdsAppQuickActionsElement>;
            "eds-assistive-text": LocalJSX.EdsAssistiveText & JSXBase.HTMLAttributes<HTMLEdsAssistiveTextElement>;
            "eds-avatar": LocalJSX.EdsAvatar & JSXBase.HTMLAttributes<HTMLEdsAvatarElement>;
            "eds-badge": LocalJSX.EdsBadge & JSXBase.HTMLAttributes<HTMLEdsBadgeElement>;
            "eds-bar-chart": LocalJSX.EdsBarChart & JSXBase.HTMLAttributes<HTMLEdsBarChartElement>;
            "eds-bottom-sheet": LocalJSX.EdsBottomSheet & JSXBase.HTMLAttributes<HTMLEdsBottomSheetElement>;
            "eds-button": LocalJSX.EdsButton & JSXBase.HTMLAttributes<HTMLEdsButtonElement>;
            "eds-card": LocalJSX.EdsCard & JSXBase.HTMLAttributes<HTMLEdsCardElement>;
            "eds-chart-legend": LocalJSX.EdsChartLegend & JSXBase.HTMLAttributes<HTMLEdsChartLegendElement>;
            "eds-checkbox": LocalJSX.EdsCheckbox & JSXBase.HTMLAttributes<HTMLEdsCheckboxElement>;
            "eds-chip": LocalJSX.EdsChip & JSXBase.HTMLAttributes<HTMLEdsChipElement>;
            "eds-container": LocalJSX.EdsContainer & JSXBase.HTMLAttributes<HTMLEdsContainerElement>;
            "eds-contract-item": LocalJSX.EdsContractItem & JSXBase.HTMLAttributes<HTMLEdsContractItemElement>;
            "eds-contract-type-icon": LocalJSX.EdsContractTypeIcon & JSXBase.HTMLAttributes<HTMLEdsContractTypeIconElement>;
            "eds-data-table": LocalJSX.EdsDataTable & JSXBase.HTMLAttributes<HTMLEdsDataTableElement>;
            "eds-data-table-cell": LocalJSX.EdsDataTableCell & JSXBase.HTMLAttributes<HTMLEdsDataTableCellElement>;
            "eds-data-table-header": LocalJSX.EdsDataTableHeader & JSXBase.HTMLAttributes<HTMLEdsDataTableHeaderElement>;
            "eds-data-table-heading": LocalJSX.EdsDataTableHeading & JSXBase.HTMLAttributes<HTMLEdsDataTableHeadingElement>;
            "eds-data-table-row": LocalJSX.EdsDataTableRow & JSXBase.HTMLAttributes<HTMLEdsDataTableRowElement>;
            "eds-datalist": LocalJSX.EdsDatalist & JSXBase.HTMLAttributes<HTMLEdsDatalistElement>;
            "eds-datalist-item": LocalJSX.EdsDatalistItem & JSXBase.HTMLAttributes<HTMLEdsDatalistItemElement>;
            "eds-date-picker": LocalJSX.EdsDatePicker & JSXBase.HTMLAttributes<HTMLEdsDatePickerElement>;
            "eds-description-list": LocalJSX.EdsDescriptionList & JSXBase.HTMLAttributes<HTMLEdsDescriptionListElement>;
            "eds-dialog": LocalJSX.EdsDialog & JSXBase.HTMLAttributes<HTMLEdsDialogElement>;
            "eds-divider": LocalJSX.EdsDivider & JSXBase.HTMLAttributes<HTMLEdsDividerElement>;
            "eds-dropdown": LocalJSX.EdsDropdown & JSXBase.HTMLAttributes<HTMLEdsDropdownElement>;
            "eds-editable-block": LocalJSX.EdsEditableBlock & JSXBase.HTMLAttributes<HTMLEdsEditableBlockElement>;
            "eds-elevation": LocalJSX.EdsElevation & JSXBase.HTMLAttributes<HTMLEdsElevationElement>;
            "eds-expandable-card": LocalJSX.EdsExpandableCard & JSXBase.HTMLAttributes<HTMLEdsExpandableCardElement>;
            "eds-fields-group": LocalJSX.EdsFieldsGroup & JSXBase.HTMLAttributes<HTMLEdsFieldsGroupElement>;
            "eds-flex": LocalJSX.EdsFlex & JSXBase.HTMLAttributes<HTMLEdsFlexElement>;
            "eds-flex-item": LocalJSX.EdsFlexItem & JSXBase.HTMLAttributes<HTMLEdsFlexItemElement>;
            "eds-grid-area": LocalJSX.EdsGridArea & JSXBase.HTMLAttributes<HTMLEdsGridAreaElement>;
            "eds-grid-area-item": LocalJSX.EdsGridAreaItem & JSXBase.HTMLAttributes<HTMLEdsGridAreaItemElement>;
            "eds-grid-layout": LocalJSX.EdsGridLayout & JSXBase.HTMLAttributes<HTMLEdsGridLayoutElement>;
            "eds-grid-layout-item": LocalJSX.EdsGridLayoutItem & JSXBase.HTMLAttributes<HTMLEdsGridLayoutItemElement>;
            "eds-grid-style-one": LocalJSX.EdsGridStyleOne & JSXBase.HTMLAttributes<HTMLEdsGridStyleOneElement>;
            "eds-grid-style-two": LocalJSX.EdsGridStyleTwo & JSXBase.HTMLAttributes<HTMLEdsGridStyleTwoElement>;
            "eds-heading": LocalJSX.EdsHeading & JSXBase.HTMLAttributes<HTMLEdsHeadingElement>;
            "eds-hero": LocalJSX.EdsHero & JSXBase.HTMLAttributes<HTMLEdsHeroElement>;
            "eds-icon": LocalJSX.EdsIcon & JSXBase.HTMLAttributes<HTMLEdsIconElement>;
            "eds-image": LocalJSX.EdsImage & JSXBase.HTMLAttributes<HTMLEdsImageElement>;
            "eds-info": LocalJSX.EdsInfo & JSXBase.HTMLAttributes<HTMLEdsInfoElement>;
            "eds-input": LocalJSX.EdsInput & JSXBase.HTMLAttributes<HTMLEdsInputElement>;
            "eds-input-chip": LocalJSX.EdsInputChip & JSXBase.HTMLAttributes<HTMLEdsInputChipElement>;
            "eds-label": LocalJSX.EdsLabel & JSXBase.HTMLAttributes<HTMLEdsLabelElement>;
            "eds-line-chart": LocalJSX.EdsLineChart & JSXBase.HTMLAttributes<HTMLEdsLineChartElement>;
            "eds-link": LocalJSX.EdsLink & JSXBase.HTMLAttributes<HTMLEdsLinkElement>;
            "eds-list": LocalJSX.EdsList & JSXBase.HTMLAttributes<HTMLEdsListElement>;
            "eds-loader-skeleton": LocalJSX.EdsLoaderSkeleton & JSXBase.HTMLAttributes<HTMLEdsLoaderSkeletonElement>;
            "eds-logo": LocalJSX.EdsLogo & JSXBase.HTMLAttributes<HTMLEdsLogoElement>;
            "eds-menu": LocalJSX.EdsMenu & JSXBase.HTMLAttributes<HTMLEdsMenuElement>;
            "eds-message": LocalJSX.EdsMessage & JSXBase.HTMLAttributes<HTMLEdsMessageElement>;
            "eds-message-manager": LocalJSX.EdsMessageManager & JSXBase.HTMLAttributes<HTMLEdsMessageManagerElement>;
            "eds-mobile-data-table": LocalJSX.EdsMobileDataTable & JSXBase.HTMLAttributes<HTMLEdsMobileDataTableElement>;
            "eds-motion": LocalJSX.EdsMotion & JSXBase.HTMLAttributes<HTMLEdsMotionElement>;
            "eds-navigation": LocalJSX.EdsNavigation & JSXBase.HTMLAttributes<HTMLEdsNavigationElement>;
            "eds-no-results": LocalJSX.EdsNoResults & JSXBase.HTMLAttributes<HTMLEdsNoResultsElement>;
            "eds-page-header": LocalJSX.EdsPageHeader & JSXBase.HTMLAttributes<HTMLEdsPageHeaderElement>;
            "eds-pagination": LocalJSX.EdsPagination & JSXBase.HTMLAttributes<HTMLEdsPaginationElement>;
            "eds-panel": LocalJSX.EdsPanel & JSXBase.HTMLAttributes<HTMLEdsPanelElement>;
            "eds-paragraph": LocalJSX.EdsParagraph & JSXBase.HTMLAttributes<HTMLEdsParagraphElement>;
            "eds-positioned-badge": LocalJSX.EdsPositionedBadge & JSXBase.HTMLAttributes<HTMLEdsPositionedBadgeElement>;
            "eds-positioned-icon": LocalJSX.EdsPositionedIcon & JSXBase.HTMLAttributes<HTMLEdsPositionedIconElement>;
            "eds-pricing-table": LocalJSX.EdsPricingTable & JSXBase.HTMLAttributes<HTMLEdsPricingTableElement>;
            "eds-progress-bar": LocalJSX.EdsProgressBar & JSXBase.HTMLAttributes<HTMLEdsProgressBarElement>;
            "eds-quick-action": LocalJSX.EdsQuickAction & JSXBase.HTMLAttributes<HTMLEdsQuickActionElement>;
            "eds-radio-button": LocalJSX.EdsRadioButton & JSXBase.HTMLAttributes<HTMLEdsRadioButtonElement>;
            "eds-scrollspy": LocalJSX.EdsScrollspy & JSXBase.HTMLAttributes<HTMLEdsScrollspyElement>;
            "eds-select": LocalJSX.EdsSelect & JSXBase.HTMLAttributes<HTMLEdsSelectElement>;
            "eds-selection-controls": LocalJSX.EdsSelectionControls & JSXBase.HTMLAttributes<HTMLEdsSelectionControlsElement>;
            "eds-side-sheet": LocalJSX.EdsSideSheet & JSXBase.HTMLAttributes<HTMLEdsSideSheetElement>;
            "eds-skeleton": LocalJSX.EdsSkeleton & JSXBase.HTMLAttributes<HTMLEdsSkeletonElement>;
            "eds-slider": LocalJSX.EdsSlider & JSXBase.HTMLAttributes<HTMLEdsSliderElement>;
            "eds-small": LocalJSX.EdsSmall & JSXBase.HTMLAttributes<HTMLEdsSmallElement>;
            "eds-status-icon": LocalJSX.EdsStatusIcon & JSXBase.HTMLAttributes<HTMLEdsStatusIconElement>;
            "eds-steps": LocalJSX.EdsSteps & JSXBase.HTMLAttributes<HTMLEdsStepsElement>;
            "eds-switch": LocalJSX.EdsSwitch & JSXBase.HTMLAttributes<HTMLEdsSwitchElement>;
            "eds-tabs": LocalJSX.EdsTabs & JSXBase.HTMLAttributes<HTMLEdsTabsElement>;
            "eds-template-grid-mobile": LocalJSX.EdsTemplateGridMobile & JSXBase.HTMLAttributes<HTMLEdsTemplateGridMobileElement>;
            "eds-text-field": LocalJSX.EdsTextField & JSXBase.HTMLAttributes<HTMLEdsTextFieldElement>;
            "eds-themes-manager": LocalJSX.EdsThemesManager & JSXBase.HTMLAttributes<HTMLEdsThemesManagerElement>;
            "eds-tooltip": LocalJSX.EdsTooltip & JSXBase.HTMLAttributes<HTMLEdsTooltipElement>;
            "eds-upload-dragger": LocalJSX.EdsUploadDragger & JSXBase.HTMLAttributes<HTMLEdsUploadDraggerElement>;
            "eds-uploaded-image": LocalJSX.EdsUploadedImage & JSXBase.HTMLAttributes<HTMLEdsUploadedImageElement>;
            "eds-video": LocalJSX.EdsVideo & JSXBase.HTMLAttributes<HTMLEdsVideoElement>;
            "eds-view-app-enovos": LocalJSX.EdsViewAppEnovos & JSXBase.HTMLAttributes<HTMLEdsViewAppEnovosElement>;
            "eds-view-app-enovos-section-404": LocalJSX.EdsViewAppEnovosSection404 & JSXBase.HTMLAttributes<HTMLEdsViewAppEnovosSection404Element>;
            "eds-view-app-enovos-section-consumption": LocalJSX.EdsViewAppEnovosSectionConsumption & JSXBase.HTMLAttributes<HTMLEdsViewAppEnovosSectionConsumptionElement>;
            "eds-view-app-enovos-section-contract-details": LocalJSX.EdsViewAppEnovosSectionContractDetails & JSXBase.HTMLAttributes<HTMLEdsViewAppEnovosSectionContractDetailsElement>;
            "eds-view-app-enovos-section-contract-list": LocalJSX.EdsViewAppEnovosSectionContractList & JSXBase.HTMLAttributes<HTMLEdsViewAppEnovosSectionContractListElement>;
            "eds-view-app-enovos-section-contract-list-empty": LocalJSX.EdsViewAppEnovosSectionContractListEmpty & JSXBase.HTMLAttributes<HTMLEdsViewAppEnovosSectionContractListEmptyElement>;
            "eds-view-app-enovos-section-i-am-moving-single-contract": LocalJSX.EdsViewAppEnovosSectionIAmMovingSingleContract & JSXBase.HTMLAttributes<HTMLEdsViewAppEnovosSectionIAmMovingSingleContractElement>;
            "eds-view-app-enovos-section-invoices": LocalJSX.EdsViewAppEnovosSectionInvoices & JSXBase.HTMLAttributes<HTMLEdsViewAppEnovosSectionInvoicesElement>;
            "eds-view-app-enovos-section-landing-page": LocalJSX.EdsViewAppEnovosSectionLandingPage & JSXBase.HTMLAttributes<HTMLEdsViewAppEnovosSectionLandingPageElement>;
            "eds-view-app-enovos-section-my-account-multiple": LocalJSX.EdsViewAppEnovosSectionMyAccountMultiple & JSXBase.HTMLAttributes<HTMLEdsViewAppEnovosSectionMyAccountMultipleElement>;
            "eds-view-app-enovos-section-my-account-single": LocalJSX.EdsViewAppEnovosSectionMyAccountSingle & JSXBase.HTMLAttributes<HTMLEdsViewAppEnovosSectionMyAccountSingleElement>;
            "eds-view-app-enovos-section-overview": LocalJSX.EdsViewAppEnovosSectionOverview & JSXBase.HTMLAttributes<HTMLEdsViewAppEnovosSectionOverviewElement>;
            "eds-view-app-enovos-section-overview-with-slider": LocalJSX.EdsViewAppEnovosSectionOverviewWithSlider & JSXBase.HTMLAttributes<HTMLEdsViewAppEnovosSectionOverviewWithSliderElement>;
            "eds-viewport": LocalJSX.EdsViewport & JSXBase.HTMLAttributes<HTMLEdsViewportElement>;
        }
    }
}
